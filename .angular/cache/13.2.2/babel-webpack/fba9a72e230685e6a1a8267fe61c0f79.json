{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { ConfigService } from './config';\nimport { GlobalSettingsService } from './globalsettings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./globalsettings\";\nimport * as i3 from \"./config\";\nexport let OpaService = /*#__PURE__*/(() => {\n  class OpaService {\n    constructor(config, http, settings_) {\n      this.config = config;\n      this.http = http;\n      this.settings_ = settings_;\n      this.configPath_ = 'config';\n      this.opaList = {\n        listMeta: {\n          totalItems: 0\n        },\n        items: []\n      };\n    }\n\n    init() {\n      this.settings_.load(() => {\n        this.config.getFileList().forEach(file => {\n          this.readOpa(file).subscribe(config => {\n            this.parseOpa(config);\n          });\n        });\n      }, () => {});\n    }\n\n    readOpa(file) {\n      const headers = new HttpHeaders().set('Content-Type', 'text/plain; charset=utf-8');\n      return this.http.get('assets/config/' + file, {\n        headers,\n        responseType: 'text'\n      });\n    }\n\n    getConfig() {\n      return of(this.opaList);\n    }\n\n    parseOpa(opaFile) {\n      const msgList = opaFile.split('[msg]');\n      msgList.forEach(msg => {\n        msg = msg.replace('{', '');\n\n        if (!msg.trim().startsWith('#')) {\n          const kind = this.getKind(msg);\n          const champ = this.getChamp(msg);\n          const contrainte = this.getContrainte(msg);\n          let index = -1;\n\n          if (kind !== '' && champ !== '' && contrainte !== '') {\n            this.opaList.items.forEach((item, i) => {\n              if (kind === item.kind && champ === item.champ) {\n                index = i;\n              }\n            });\n\n            if (index !== -1) {\n              this.opaList.items[index].contrainte.push(contrainte);\n            } else {\n              const opaDetail = {\n                objectMeta: {},\n                typeMeta: {\n                  kind: 'Opa'\n                },\n                kind: '',\n                champ: '',\n                contrainte: []\n              };\n              opaDetail.kind = kind;\n              opaDetail.champ = champ;\n              opaDetail.contrainte.push(contrainte);\n              this.opaList.items.push(opaDetail);\n            }\n          }\n        }\n      });\n    }\n\n    getKind(msg) {\n      const kindList = msg.split('kind.kind');\n\n      if (kindList.length > 1) {\n        return kindList[1].split('\"')[1];\n      } else {\n        return '';\n      }\n    }\n\n    getContrainte(msg) {\n      const outList = msg.split('msg');\n\n      if (outList.length > 1) {\n        let output = outList[1].split('\"')[1];\n        output = output.replace('%v ', '');\n        output = output.replace('%v', '');\n        output = output.replace('%q', '');\n        output = output.replace(':  ', '');\n        output = output.replace('(utilisé : )', '');\n        output = output.replace(': utilisé : )', '');\n        return output;\n      } else {\n        return '';\n      }\n    }\n\n    getChamp(msg) {\n      if (msg.includes('memory')) {\n        return 'RAM';\n      } else if (msg.includes('cpu')) {\n        return 'CPU';\n      } else if (msg.includes('sonde')) {\n        return 'Sonde';\n      } else if (msg.includes('image')) {\n        return 'Image';\n      } else if (msg.includes('IngressRoute')) {\n        return 'Ingress';\n      } else if (msg.includes('service')) {\n        return 'Service';\n      } else {\n        return 'Autre';\n      }\n    }\n\n  }\n\n  OpaService.ɵfac = function OpaService_Factory(t) {\n    return new (t || OpaService)(i0.ɵɵinject(ConfigService), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GlobalSettingsService));\n  };\n\n  OpaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OpaService,\n    factory: OpaService.ɵfac\n  });\n  return OpaService;\n})();","map":null,"metadata":{},"sourceType":"module"}