{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport _ from 'lodash';\nimport { of, ReplaySubject, Subject } from 'rxjs';\nimport { catchError, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { AuthorizerService } from './authorizer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./authorizer\";\nexport const DEFAULT_SETTINGS = {\n  itemsPerPage: 10,\n  clusterName: '',\n  labelsLimit: 3,\n  logsAutoRefreshTimeInterval: 5,\n  resourceAutoRefreshTimeInterval: 5,\n  disableAccessDeniedNotifications: false,\n  defaultNamespace: 'default',\n  namespaceFallbackList: ['default']\n};\nexport let GlobalSettingsService = /*#__PURE__*/(() => {\n  class GlobalSettingsService {\n    constructor(http_, authorizer_) {\n      this.http_ = http_;\n      this.authorizer_ = authorizer_;\n      this.onSettingsUpdate = new ReplaySubject();\n      this.onPageVisibilityChange = new EventEmitter();\n      this.endpoint_ = 'api/v1/settings/global';\n      this.settings_ = DEFAULT_SETTINGS;\n      this.unsubscribe_ = new Subject();\n      this.isInitialized_ = false;\n      this.isPageVisible_ = true;\n    }\n\n    init() {\n      this.onPageVisibilityChange.pipe(takeUntil(this.unsubscribe_)).subscribe(visible => {\n        this.isPageVisible_ = visible;\n        this.onSettingsUpdate.next();\n      });\n      return this.load();\n    }\n\n    isInitialized() {\n      return this.isInitialized_;\n    }\n\n    load(onLoad, onFail) {\n      return this.http_.get(this.endpoint_).pipe(tap(settings => {\n        this.settings_ = this._defaultSettings(settings);\n        this.isInitialized_ = true;\n        this.onSettingsUpdate.next();\n        if (onLoad) onLoad(this.settings_);\n      }), catchError(err => {\n        this.isInitialized_ = false;\n        this.onSettingsUpdate.next();\n        if (onFail) onFail(err);\n        return of(DEFAULT_SETTINGS);\n      })).toPromise();\n    }\n\n    _defaultSettings(settings) {\n      if (!settings) {\n        return DEFAULT_SETTINGS;\n      }\n\n      Object.keys(DEFAULT_SETTINGS).forEach(key => {\n        // @ts-ignore\n        settings[key] = settings[key] === undefined ? DEFAULT_SETTINGS[key] : settings[key];\n      });\n      return settings;\n    }\n\n    canI() {\n      return this.authorizer_.proxyGET(this.endpoint_).pipe(switchMap(_ => of(true))).pipe(catchError(_ => of(false)));\n    }\n\n    save(settings) {\n      const httpOptions = {\n        method: 'PUT',\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http_.put(this.endpoint_, settings, httpOptions);\n    }\n\n    getClusterName() {\n      return this.settings_.clusterName;\n    }\n\n    getItemsPerPage() {\n      return this.settings_.itemsPerPage;\n    }\n\n    getLabelsLimit() {\n      return this.settings_.labelsLimit;\n    }\n\n    getLogsAutoRefreshTimeInterval() {\n      return this.isPageVisible_ ? this.settings_.logsAutoRefreshTimeInterval : 0;\n    }\n\n    getResourceAutoRefreshTimeInterval() {\n      return this.isPageVisible_ ? this.settings_.resourceAutoRefreshTimeInterval : 0;\n    }\n\n    getDisableAccessDeniedNotifications() {\n      return this.settings_.disableAccessDeniedNotifications;\n    }\n\n    getDefaultNamespace() {\n      return this.settings_.defaultNamespace;\n    }\n\n    getNamespaceFallbackList() {\n      return _.isArray(this.settings_.namespaceFallbackList) ? this.settings_.namespaceFallbackList : [this.settings_.defaultNamespace];\n    }\n\n  }\n\n  GlobalSettingsService.ɵfac = function GlobalSettingsService_Factory(t) {\n    return new (t || GlobalSettingsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthorizerService));\n  };\n\n  GlobalSettingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalSettingsService,\n    factory: GlobalSettingsService.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalSettingsService;\n})();","map":null,"metadata":{},"sourceType":"module"}