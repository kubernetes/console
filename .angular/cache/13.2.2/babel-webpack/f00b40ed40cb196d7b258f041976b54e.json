{"ast":null,"code":"import { ConfigService } from '../services/global/config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/global/config\";\nconst i18n = {\n  MSG_TIME_UNIT_SECOND_LABEL: 'a second',\n  MSG_TIME_UNIT_SECONDS_LABEL: 'seconds',\n  MSG_TIME_UNIT_MINUTE_LABEL: 'a minute',\n  MSG_TIME_UNIT_MINUTES_LABEL: 'minutes',\n  MSG_TIME_UNIT_HOUR_LABEL: 'an hour',\n  MSG_TIME_UNIT_HOURS_LABEL: 'hours',\n  MSG_TIME_UNIT_DAY_LABEL: 'a day',\n  MSG_TIME_UNIT_DAYS_LABEL: 'days',\n  MSG_TIME_UNIT_MONTH_LABEL: 'a month',\n  MSG_TIME_UNIT_MONTHS_LABEL: 'months',\n  MSG_TIME_UNIT_YEAR_LABEL: 'a year',\n  MSG_TIME_UNIT_YEARS_LABEL: 'years',\n  MSG_TIME_NOT_YET_LABEL: '-'\n};\n/**\n * Unit name constants (singular and plural form), that will be used by the filter.\n */\n\nconst units = {\n  SECOND: [i18n.MSG_TIME_UNIT_SECOND_LABEL, i18n.MSG_TIME_UNIT_SECONDS_LABEL],\n  MINUTE: [i18n.MSG_TIME_UNIT_MINUTE_LABEL, i18n.MSG_TIME_UNIT_MINUTES_LABEL],\n  HOUR: [i18n.MSG_TIME_UNIT_HOUR_LABEL, i18n.MSG_TIME_UNIT_HOURS_LABEL],\n  DAY: [i18n.MSG_TIME_UNIT_DAY_LABEL, i18n.MSG_TIME_UNIT_DAYS_LABEL],\n  MONTH: [i18n.MSG_TIME_UNIT_MONTH_LABEL, i18n.MSG_TIME_UNIT_MONTHS_LABEL],\n  YEAR: [i18n.MSG_TIME_UNIT_YEAR_LABEL, i18n.MSG_TIME_UNIT_YEARS_LABEL]\n};\nconst unitConversions = {\n  MILLISECONDS_PER_SECOND: 1000,\n  SECONDS_PER_MINUTE: 60,\n  MINUTES_PER_HOUR: 60,\n  HOURS_PER_DAY: 24,\n  DAYS_PER_MONTH: 30,\n  DAYS_PER_YEAR: 365,\n  MONTHS_PER_YEAR: 12\n};\nconst timeConstants = {\n  NOT_YET: i18n.MSG_TIME_NOT_YET_LABEL\n};\nexport let RelativeTimeFormatter = /*#__PURE__*/(() => {\n  class RelativeTimeFormatter {\n    constructor(config_) {\n      this.config_ = config_;\n    }\n\n    transform(value, _) {\n      if (value === null) {\n        return timeConstants.NOT_YET;\n      } // Current server time.\n\n\n      const serverTime = this.config_.getServerTime(); // Current and given times in miliseconds.\n\n      const currentTime = this.getCurrentTime_(serverTime);\n      const givenTime = new Date(value).getTime(); // Time differences between current time and given time in specific units.\n\n      const diffInMilliseconds = currentTime - givenTime;\n      const diffInSeconds = Math.floor(diffInMilliseconds / unitConversions.MILLISECONDS_PER_SECOND);\n      const diffInMinutes = Math.floor(diffInSeconds / unitConversions.SECONDS_PER_MINUTE);\n      const diffInHours = Math.floor(diffInMinutes / unitConversions.MINUTES_PER_HOUR);\n      const diffInDays = Math.floor(diffInHours / unitConversions.HOURS_PER_DAY);\n      const diffInMonths = Math.floor(diffInDays / unitConversions.DAYS_PER_MONTH);\n      const diffInYears = Math.floor(diffInDays / unitConversions.DAYS_PER_YEAR); // Returns relative time value. Only biggest unit will be taken into consideration, so if time\n      // difference is 2 days and 15 hours, only '2 days' string will be returned.\n\n      if (diffInMilliseconds < -1000) {\n        // Display NOT_YET only when diff is lower than -1000ms. To show NOW message for\n        // times now() +- 1 second. This is because there may be a small desync in server time\n        // computation.\n        return timeConstants.NOT_YET;\n      } else if (diffInSeconds < 1) {\n        return this.formatOutputTimeString_(0, units.SECOND);\n      } else if (diffInMinutes < 1) {\n        return this.formatOutputTimeString_(diffInSeconds, units.SECOND);\n      } else if (diffInHours < 1) {\n        return this.formatOutputTimeString_(diffInMinutes, units.MINUTE);\n      } else if (diffInDays < 1) {\n        return this.formatOutputTimeString_(diffInHours, units.HOUR);\n      } else if (diffInMonths < 1) {\n        return this.formatOutputTimeString_(diffInDays, units.DAY);\n      } else if (diffInYears < 1) {\n        return this.formatOutputTimeString_(diffInMonths, units.MONTH);\n      }\n\n      return this.formatOutputTimeString_(diffInYears, units.YEAR);\n    }\n    /**\n     * Returns current time. If appConfig.serverTime is provided then it will be returned, otherwise\n     * current client time will be used.\n     */\n\n\n    getCurrentTime_(serverTime) {\n      return serverTime ? serverTime.getTime() : new Date().getTime();\n    }\n    /**\n     * Formats relative time string. Sample results look following: 'a year', '2 days' or '14 hours'.\n     */\n\n\n    formatOutputTimeString_(timeValue, timeUnit) {\n      if (timeValue > 1 || timeValue === 0) {\n        return `${timeValue} ${timeUnit[1]} ago`;\n      }\n\n      return `${timeUnit[0]} ago`;\n    }\n\n  }\n\n  RelativeTimeFormatter.ɵfac = function RelativeTimeFormatter_Factory(t) {\n    return new (t || RelativeTimeFormatter)(i0.ɵɵdirectiveInject(i1.ConfigService, 16));\n  };\n\n  RelativeTimeFormatter.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"kdRelativeTime\",\n    type: RelativeTimeFormatter,\n    pure: true\n  });\n  return RelativeTimeFormatter;\n})();","map":null,"metadata":{},"sourceType":"module"}