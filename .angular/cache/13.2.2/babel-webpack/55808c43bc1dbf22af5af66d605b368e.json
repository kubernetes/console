{"ast":null,"code":"import _asyncToGenerator from \"/home/pilou/Documents/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { debounce } from 'lodash';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { EndpointManager, Resource, Utility } from '@common/services/resource/endpoint';\nimport { NamespacedResourceService } from '@common/services/resource/resource';\nimport { UtilityService } from '@common/services/resource/utility';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@common/services/resource/resource\";\nimport * as i2 from \"@common/services/resource/utility\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"../common/components/card/component\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/core\";\nconst _c0 = [\"anchor\"];\n\nfunction ShellComponent_mat_select_3_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵi18nStart(0, 2, 2);\n    i0.ɵɵelement(1, \"mat-option\", 8);\n    i0.ɵɵi18nEnd();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", item_r3);\n    i0.ɵɵi18nExp(item_r3);\n    i0.ɵɵi18nApply(0);\n  }\n}\n\nfunction ShellComponent_mat_select_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵi18nStart(0, 2, 1);\n    i0.ɵɵelementStart(1, \"mat-select\", 6);\n    i0.ɵɵlistener(\"ngModelChange\", function ShellComponent_mat_select_3_Template_mat_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onPodContainerChange($event);\n    })(\"ngModelChange\", function ShellComponent_mat_select_3_Template_mat_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.selectedContainer = $event;\n    });\n    i0.ɵɵtemplate(2, ShellComponent_mat_select_3_mat_option_2_Template, 2, 2, \"mat-option\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵi18nEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedContainer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.containers);\n  }\n}\n\nexport let ShellComponent = /*#__PURE__*/(() => {\n  class ShellComponent {\n    constructor(containers_, utility_, activatedRoute_, matSnackBar_, cdr_, _router) {\n      this.containers_ = containers_;\n      this.utility_ = utility_;\n      this.activatedRoute_ = activatedRoute_;\n      this.matSnackBar_ = matSnackBar_;\n      this.cdr_ = cdr_;\n      this._router = _router;\n      this.connected_ = false;\n      this.connSubject_ = new ReplaySubject(100);\n      this.incommingMessage$_ = new Subject();\n      this.endpoint_ = EndpointManager.resource(Resource.pod, true);\n      this.unsubscribe_ = new Subject();\n      this.keyEvent$_ = new ReplaySubject(2);\n      this.namespace_ = this.activatedRoute_.snapshot.params.resourceNamespace;\n      this.podName = this.activatedRoute_.snapshot.params.resourceName;\n      const containersEndpoint = this.endpoint_.child(this.podName, Resource.container, this.namespace_);\n      this.containers_.get(containersEndpoint).pipe(takeUntil(this.unsubscribe_)).subscribe(containerList => {\n        this.containers = containerList.containers;\n\n        if (this.containers.length > 0 && !this.selectedContainer) {\n          this.onPodContainerChange(this.containers[0]);\n        }\n      });\n    }\n\n    ngAfterViewInit() {\n      this.activatedRoute_.paramMap.pipe(takeUntil(this.unsubscribe_)).subscribe(paramMap => {\n        const container = paramMap.get('containerName');\n\n        if (this.conn_ && this.connected_) {\n          this.disconnect();\n        }\n\n        if (container) {\n          this.selectedContainer = container;\n          this.setupConnection();\n          this.initTerm();\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe_.next();\n      this.unsubscribe_.complete();\n\n      if (this.conn_) {\n        this.conn_.close();\n      }\n\n      if (this.connSubject_) {\n        this.connSubject_.complete();\n      }\n\n      if (this.term) {\n        this.term.dispose();\n      }\n\n      this.incommingMessage$_.complete();\n    }\n\n    onPodContainerChange(podContainer) {\n      this._router.navigate([`/shell/${this.namespace_}/${this.podName}/${podContainer}`], {\n        queryParamsHandling: 'preserve'\n      });\n    }\n\n    disconnect() {\n      if (this.conn_) {\n        this.conn_.close();\n      }\n\n      if (this.connSubject_) {\n        this.connSubject_.complete();\n        this.connSubject_ = new ReplaySubject(100);\n      }\n\n      if (this.term) {\n        this.term.dispose();\n      }\n\n      this.incommingMessage$_.complete();\n      this.incommingMessage$_ = new Subject();\n    }\n\n    initTerm() {\n      if (this.connSubject_) {\n        this.connSubject_.complete();\n        this.connSubject_ = new ReplaySubject(100);\n      }\n\n      if (this.term) {\n        this.term.dispose();\n      }\n\n      this.term = new Terminal({\n        fontSize: 14,\n        fontFamily: 'Consolas, \"Courier New\", monospace',\n        bellStyle: 'sound',\n        cursorBlink: true\n      });\n      const fitAddon = new FitAddon();\n      this.term.loadAddon(fitAddon);\n      this.term.open(this.anchorRef.nativeElement);\n      this.debouncedFit_ = debounce(() => {\n        fitAddon.fit();\n        this.cdr_.markForCheck();\n      }, 100);\n      this.debouncedFit_();\n      window.addEventListener('resize', () => this.debouncedFit_());\n      this.connSubject_.pipe(takeUntil(this.unsubscribe_)).subscribe(frame => {\n        this.handleConnectionMessage(frame);\n      });\n      this.term.onData(this.onTerminalSendString.bind(this));\n      this.term.onResize(this.onTerminalResize.bind(this));\n      this.term.onKey(event => {\n        this.keyEvent$_.next(event.domEvent);\n      });\n      this.cdr_.markForCheck();\n    }\n\n    setupConnection() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!(_this.selectedContainer && _this.podName && _this.namespace_ && !_this.connecting_)) {\n          return;\n        }\n\n        _this.connecting_ = true;\n        _this.connectionClosed_ = false;\n        const terminalSessionUrl = `${EndpointManager.utility(Utility.shell).shell(_this.namespace_, _this.podName)}/${_this.selectedContainer}`;\n        const {\n          id\n        } = yield _this.utility_.shell(terminalSessionUrl).toPromise();\n        _this.conn_ = new SockJS(`api/sockjs?${id}`);\n        _this.conn_.onopen = _this.onConnectionOpen.bind(_this, id);\n        _this.conn_.onmessage = _this.onConnectionMessage.bind(_this);\n        _this.conn_.onclose = _this.onConnectionClose.bind(_this);\n\n        _this.cdr_.markForCheck();\n      })();\n    }\n\n    onConnectionOpen(sessionId) {\n      const startData = {\n        Op: 'bind',\n        SessionID: sessionId\n      };\n      this.conn_.send(JSON.stringify(startData));\n      this.connSubject_.next(startData);\n      this.connected_ = true;\n      this.connecting_ = false;\n      this.connectionClosed_ = false; // Make sure the terminal is with correct display size.\n\n      this.onTerminalResize(); // Focus on connection\n\n      this.term.focus();\n      this.cdr_.markForCheck();\n    }\n\n    handleConnectionMessage(frame) {\n      if (frame.Op === 'stdout') {\n        this.term.write(frame.Data);\n      }\n\n      if (frame.Op === 'toast') {\n        this.matSnackBar_.open(frame.Data, null, {\n          duration: 3000\n        });\n      }\n\n      this.incommingMessage$_.next(frame);\n      this.cdr_.markForCheck();\n    }\n\n    onConnectionMessage(evt) {\n      const msg = JSON.parse(evt.data);\n      this.connSubject_.next(msg);\n    }\n\n    onConnectionClose(_evt) {\n      if (!this.connected_) {\n        return;\n      }\n\n      this.conn_.close();\n      this.connected_ = false;\n      this.connecting_ = false;\n      this.connectionClosed_ = true;\n      this.matSnackBar_.open(_evt.reason, null, {\n        duration: 3000\n      });\n      this.cdr_.markForCheck();\n    }\n\n    onTerminalSendString(str) {\n      if (this.connected_) {\n        this.conn_.send(JSON.stringify({\n          Op: 'stdin',\n          Data: str,\n          Cols: this.term.cols,\n          Rows: this.term.rows\n        }));\n      }\n    }\n\n    onTerminalResize() {\n      if (this.connected_) {\n        this.conn_.send(JSON.stringify({\n          Op: 'resize',\n          Cols: this.term.cols,\n          Rows: this.term.rows\n        }));\n      }\n    }\n\n  }\n\n  ShellComponent.ɵfac = function ShellComponent_Factory(t) {\n    return new (t || ShellComponent)(i0.ɵɵdirectiveInject(i1.NamespacedResourceService), i0.ɵɵdirectiveInject(i2.UtilityService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  ShellComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ShellComponent,\n    selectors: [[\"kd-shell\"]],\n    viewQuery: function ShellComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.anchorRef = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 3,\n    consts: function () {\n      let i18n_1;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        const MSG_EXTERNAL_5987522977931384861$$SRC_APP_FRONTEND_SHELL_COMPONENT_TS__2 = goog.getMsg(\" Shell in {$startTagMatSelect}{$startTagMatOption} {$interpolation} {$closeTagMatOption}{$closeTagMatSelect} in {$interpolation_1} \", {\n          \"startTagMatSelect\": \"\\uFFFD*3:1\\uFFFD\\uFFFD#1:1\\uFFFD\",\n          \"closeTagMatSelect\": \"\\uFFFD/#1:1\\uFFFD\\uFFFD/*3:1\\uFFFD\",\n          \"interpolation_1\": \"\\uFFFD0\\uFFFD\",\n          \"startTagMatOption\": \"\\uFFFD*2:2\\uFFFD\\uFFFD#1:2\\uFFFD\",\n          \"closeTagMatOption\": \"\\uFFFD/#1:2\\uFFFD\\uFFFD/*2:2\\uFFFD\",\n          \"interpolation\": \"\\uFFFD0:2\\uFFFD\"\n        });\n        i18n_1 = MSG_EXTERNAL_5987522977931384861$$SRC_APP_FRONTEND_SHELL_COMPONENT_TS__2;\n      } else {\n        i18n_1 = $localize` Shell in ${\"\\uFFFD*3:1\\uFFFD\\uFFFD#1:1\\uFFFD\"}:START_TAG_MAT_SELECT:${\"\\uFFFD*2:2\\uFFFD\\uFFFD#1:2\\uFFFD\"}:START_TAG_MAT_OPTION: ${\"\\uFFFD0:2\\uFFFD\"}:INTERPOLATION: ${\"\\uFFFD/#1:2\\uFFFD\\uFFFD/*2:2\\uFFFD\"}:CLOSE_TAG_MAT_OPTION:${\"\\uFFFD/#1:1\\uFFFD\\uFFFD/*3:1\\uFFFD\"}:CLOSE_TAG_MAT_SELECT: in ${\"\\uFFFD0\\uFFFD\"}:INTERPOLATION_1: `;\n      }\n\n      return [[1, \"kd-shell-content-card\", 3, \"expandable\"], [\"title\", \"\", 1, \"kd-shell-content-card-title\"], i18n_1, [\"class\", \"kd-shell-toolbar-select\", 3, \"ngModel\", \"ngModelChange\", 4, \"ngIf\"], [\"content\", \"\", 1, \"xterm-anchor\"], [\"anchor\", \"\"], [1, \"kd-shell-toolbar-select\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]];\n    },\n    template: function ShellComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kd-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵi18nStart(2, 2);\n        i0.ɵɵtemplate(3, ShellComponent_mat_select_3_Template, 3, 2, \"mat-select\", 3);\n        i0.ɵɵi18nEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"div\", 4, 5);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"expandable\", false);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", (ctx.containers == null ? null : ctx.containers.length) > 0);\n        i0.ɵɵi18nExp(ctx.podName);\n        i0.ɵɵi18nApply(2);\n      }\n    },\n    directives: [i5.CardComponent, i6.NgIf, i7.MatSelect, i8.NgControlStatus, i8.NgModel, i6.NgForOf, i9.MatOption],\n    styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n  height: calc(100% - 56px);\\n  width: 100%;\\n}\\n\\n.kd-shell-content-card[_ngcontent-%COMP%] {\\n  box-sizing: border-box;\\n  display: block;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.kd-shell-content-card[_ngcontent-%COMP%]   .kd-shell-content-card-title[_ngcontent-%COMP%] {\\n  display: inline;\\n}\\n\\n.kd-shell-content-card[_ngcontent-%COMP%]     mat-card {\\n  display: flex;\\n  flex-flow: column;\\n  height: 100%;\\n}\\n\\n.kd-shell-content-card[_ngcontent-%COMP%]     mat-card > mat-card-title + div {\\n  display: flex;\\n  flex: 1;\\n  flex-flow: column;\\n}\\n\\n.kd-shell-content-card[_ngcontent-%COMP%]     mat-card mat-card-content {\\n  display: flex;\\n  flex: 1;\\n  flex-flow: column;\\n  background: #000;\\n  padding: 0;\\n}\\n\\n.kd-shell-content-card[_ngcontent-%COMP%]     mat-card mat-card-content > div, .kd-shell-content-card[_ngcontent-%COMP%]     mat-card mat-card-content .xterm-anchor {\\n  display: flex;\\n  flex: 1;\\n  flex-flow: column;\\n}\\n\\n.kd-shell-toolbar-select[_ngcontent-%COMP%] {\\n  width: 180px;\\n}\\n\\n.kd-shell-toolbar-select[_ngcontent-%COMP%]   .md-select-value[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  min-width: 160px;\\n}\"]\n  });\n  return ShellComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}