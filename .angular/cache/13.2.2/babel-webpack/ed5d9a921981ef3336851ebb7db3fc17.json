{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient } from '@angular/common/http';\nimport { timer } from 'rxjs';\nimport { publishReplay, refCount, switchMap, switchMapTo } from 'rxjs/operators';\nimport { ResourceBase } from '../../resources/resource';\nimport { GlobalSettingsService } from '../global/globalsettings';\nimport { NamespaceService } from '../global/namespace';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../global/globalsettings\";\nimport * as i3 from \"../global/namespace\";\nexport let ResourceService = /*#__PURE__*/(() => {\n  class ResourceService extends ResourceBase {\n    /**\n     * We need to provide HttpClient here since the base is not annotated with\n     * @Injectable\n     */\n    constructor(http, settings_) {\n      super(http);\n      this.http = http;\n      this.settings_ = settings_;\n    }\n\n    get(endpoint, name, params) {\n      if (name) {\n        endpoint = endpoint.replace(':name', name);\n      }\n\n      return this.settings_.onSettingsUpdate.pipe(switchMap(() => {\n        let interval = this.settings_.getResourceAutoRefreshTimeInterval();\n        interval = interval === 0 ? undefined : interval * 1000;\n        return timer(0, interval);\n      })).pipe(switchMapTo(this.http_.get(endpoint, {\n        params\n      }))).pipe(publishReplay(1)).pipe(refCount());\n    }\n\n  }\n\n  ResourceService.ɵfac = function ResourceService_Factory(t) {\n    return new (t || ResourceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GlobalSettingsService));\n  };\n\n  ResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ResourceService,\n    factory: ResourceService.ɵfac\n  });\n  return ResourceService;\n})();\nexport let NamespacedResourceService = /*#__PURE__*/(() => {\n  class NamespacedResourceService extends ResourceBase {\n    constructor(http, namespace_, settings_) {\n      super(http);\n      this.http = http;\n      this.namespace_ = namespace_;\n      this.settings_ = settings_;\n    }\n\n    getNamespace_() {\n      const currentNamespace = this.namespace_.current();\n      return this.namespace_.isMultiNamespace(currentNamespace) ? ' ' : currentNamespace;\n    }\n\n    get(endpoint, name, namespace, params) {\n      if (namespace) {\n        endpoint = endpoint.replace(':namespace', namespace);\n      } else {\n        endpoint = endpoint.replace(':namespace', this.getNamespace_());\n      }\n\n      if (name) {\n        endpoint = endpoint.replace(':name', name);\n      }\n\n      return this.settings_.onSettingsUpdate.pipe(switchMap(() => {\n        let interval = this.settings_.getResourceAutoRefreshTimeInterval();\n        interval = interval === 0 ? undefined : interval * 1000;\n        return timer(0, interval);\n      })).pipe(switchMapTo(this.http_.get(endpoint, {\n        params\n      }))).pipe(publishReplay(1)).pipe(refCount());\n    }\n\n  }\n\n  NamespacedResourceService.ɵfac = function NamespacedResourceService_Factory(t) {\n    return new (t || NamespacedResourceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i3.NamespaceService), i0.ɵɵinject(i2.GlobalSettingsService));\n  };\n\n  NamespacedResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NamespacedResourceService,\n    factory: NamespacedResourceService.ɵfac\n  });\n  return NamespacedResourceService;\n})();","map":null,"metadata":{},"sourceType":"module"}