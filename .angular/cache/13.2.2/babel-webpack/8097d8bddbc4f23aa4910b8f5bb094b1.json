{"ast":null,"code":"import { ResourceService } from '../resource/resource';\nimport { EndpointManager, Resource } from '../resource/endpoint';\nimport { NotificationsService } from './notifications';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../resource/resource\";\nimport * as i2 from \"./notifications\";\nexport let PermissionsService = /*#__PURE__*/(() => {\n  class PermissionsService {\n    constructor(namespace_, notifications_, podList_) {\n      this.namespace_ = namespace_;\n      this.notifications_ = notifications_;\n      this.podList_ = podList_;\n      this.endpoint_ = EndpointManager.resource(Resource.namespace);\n    }\n\n    init() {}\n\n    getNs() {\n      return this.namespace_.get(this.endpoint_.list());\n    }\n\n    random() {}\n\n    getNsList() {\n      return this.nsList;\n    }\n\n    getFirstNs() {\n      return this.firstNs;\n    } //Redirects to the first namespace that the user is allowed to\n\n\n    redirectToNs(state_) {\n      this.getNs().pipe(first()).subscribe(namespaceList => {\n        let redirection = false;\n        this.nsList = namespaceList.namespaces.map(n => n.objectMeta.name);\n\n        if (namespaceList.errors.length > 0) {\n          for (const err of namespaceList.errors) {\n            this.notifications_.pushErrors([err]);\n          }\n        }\n\n        for (const ns of this.nsList) {\n          this.podList_.get('api/v1/pod/' + ns).pipe(first()).subscribe(podList => {\n            if (podList.errors.length === 0 && redirection === false) {\n              redirection = true; //console.log(\"Redirecting to \" + ns)\n\n              state_.navigate(['overview'], {\n                queryParams: {\n                  namespace: ns\n                }\n              });\n            }\n          }, () => {}, () => {});\n        }\n      });\n    }\n\n  }\n\n  PermissionsService.ɵfac = function PermissionsService_Factory(t) {\n    return new (t || PermissionsService)(i0.ɵɵinject(i1.ResourceService), i0.ɵɵinject(i2.NotificationsService), i0.ɵɵinject(i1.ResourceService));\n  };\n\n  PermissionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PermissionsService,\n    factory: PermissionsService.ɵfac\n  });\n  return PermissionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}