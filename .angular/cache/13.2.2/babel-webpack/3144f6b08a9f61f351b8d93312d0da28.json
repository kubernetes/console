{"ast":null,"code":"import { GlobalSettingsService } from './globalsettings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./globalsettings\";\nexport class Notification {\n  constructor(message, severity) {\n    this.read = false;\n    this.message = message;\n    this.icon = severity.toString();\n    this.timestamp = new Date();\n\n    switch (severity) {\n      case NotificationSeverity.info:\n        this.cssClass = 'kd-success';\n        break;\n\n      case NotificationSeverity.warning:\n        this.cssClass = 'kd-warning';\n        break;\n\n      case NotificationSeverity.error:\n        this.cssClass = 'kd-error';\n        break;\n\n      default:\n        this.cssClass = '';\n    }\n  }\n\n}\nexport var NotificationSeverity = /*#__PURE__*/(() => {\n  (function (NotificationSeverity) {\n    NotificationSeverity[\"info\"] = \"info\";\n    NotificationSeverity[\"warning\"] = \"warning\";\n    NotificationSeverity[\"error\"] = \"error\";\n  })(NotificationSeverity || (NotificationSeverity = {}));\n\n  return NotificationSeverity;\n})();\nexport let NotificationsService = /*#__PURE__*/(() => {\n  class NotificationsService {\n    constructor(_globalSettingsService) {\n      this._globalSettingsService = _globalSettingsService;\n      this.notifications_ = [];\n    }\n\n    push(message, severity) {\n      // Do not add same notifications multiple times\n      if (this.notifications_.some(notification => notification.message === message)) {\n        return;\n      }\n\n      this.notifications_ = [new Notification(message, severity), ...this.notifications_];\n    }\n\n    pushErrors(errors) {\n      if (errors) {\n        errors.forEach(error => {\n          if (this._shouldAddNotification(error)) {\n            this.push(error.ErrStatus.message, NotificationSeverity.error);\n          }\n        });\n      }\n    }\n\n    _shouldAddNotification(error) {\n      return !this._globalSettingsService.getDisableAccessDeniedNotifications() || !this._isAccessDeniedError(error);\n    }\n\n    _isAccessDeniedError(error) {\n      return error.ErrStatus.code === 403;\n    }\n\n    remove(index) {\n      this.notifications_.splice(index, 1);\n    }\n\n    getNotifications() {\n      return this.notifications_;\n    }\n\n    getUnreadCount() {\n      return this.notifications_.map(notification => {\n        return notification.read ? Number(0) : Number(1);\n      }).reduce((previousValue, currentValue) => {\n        return previousValue + currentValue;\n      }, 0);\n    }\n\n    markAllAsRead() {\n      this.notifications_.forEach(notification => {\n        notification.read = true;\n      });\n    }\n\n    clear() {\n      this.notifications_ = [];\n    }\n\n  }\n\n  NotificationsService.ɵfac = function NotificationsService_Factory(t) {\n    return new (t || NotificationsService)(i0.ɵɵinject(i1.GlobalSettingsService));\n  };\n\n  NotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsService,\n    factory: NotificationsService.ɵfac\n  });\n  return NotificationsService;\n})();","map":null,"metadata":{},"sourceType":"module"}