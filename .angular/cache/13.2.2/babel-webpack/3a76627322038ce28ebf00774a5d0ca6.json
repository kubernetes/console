{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient } from '@angular/common/http';\nimport { version } from '@environments/version';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ConfigService = /*#__PURE__*/(() => {\n  class ConfigService {\n    constructor(http) {\n      this.http = http;\n      this.configPath_ = 'config';\n    }\n\n    init() {\n      this.getAppConfig().subscribe(config => {\n        // Set init time when response from the backend will arrive.\n        this.config_ = config;\n        this.initTime_ = new Date().getTime();\n      });\n      this.readJson().subscribe(config => {\n        this.customConfig_ = config;\n\n        if (!this.customConfig_) {\n          window.location.reload();\n        }\n      });\n    }\n\n    getAppConfig() {\n      return this.http.get(this.configPath_);\n    }\n\n    getServerTime() {\n      if (this.config_.serverTime) {\n        const elapsed = new Date().getTime() - this.initTime_;\n        return new Date(this.config_.serverTime + elapsed);\n      }\n\n      return new Date();\n    }\n\n    getVersionInfo() {\n      return version;\n    }\n\n    readJson() {\n      return this.http.get('assets/config/config.json');\n    }\n\n    getCustomConfig() {\n      return this.customConfig_;\n    }\n\n    getColor() {\n      if (this.customConfig_) {\n        return this.customConfig_['color'];\n      } else {\n        return 'blue';\n      }\n    }\n\n    getFileList() {\n      if (this.customConfig_ !== undefined) {\n        console.log(this.customConfig_['opaFiles']);\n        return this.customConfig_['opaFiles'];\n      } else {\n        return [];\n      }\n    }\n\n    getTitle() {\n      if (this.customConfig_ !== undefined) {\n        return this.customConfig_['title'];\n      } else {\n        return 'error';\n      }\n    }\n\n    getMenus() {\n      if (this.customConfig_ !== undefined) {\n        return this.customConfig_['menus'];\n      } else {\n        return null;\n      }\n    }\n\n  }\n\n  ConfigService.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac\n  });\n  return ConfigService;\n})();","map":null,"metadata":{},"sourceType":"module"}