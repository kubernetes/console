{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { CONFIG_DI_TOKEN } from '../../../index.config';\nimport * as i0 from \"@angular/core\";\nexport let NamespaceService = /*#__PURE__*/(() => {\n  class NamespaceService {\n    constructor(appConfig_) {\n      this.appConfig_ = appConfig_;\n      this.onNamespaceChangeEvent = new EventEmitter();\n      /**\n       * Internal key for empty selection. To differentiate empty string from nulls.\n       */\n\n      this.allNamespacesKey_ = '_all';\n      /**\n       * Regular expression for namespace validation.\n       */\n\n      this.namespaceRegex = /^([a-z0-9]([-a-z0-9]*[a-z0-9])?|_all)$/;\n      /**\n       * Holds the currently selected namespace.\n       */\n\n      this.currentNamespace_ = '';\n    }\n\n    setCurrent(namespace) {\n      this.currentNamespace_ = namespace;\n    }\n\n    current() {\n      return this.currentNamespace_ || this.appConfig_.defaultNamespace;\n    }\n\n    getAllNamespacesKey() {\n      return this.allNamespacesKey_;\n    }\n\n    getDefaultNamespace() {\n      return this.appConfig_.defaultNamespace;\n    }\n\n    isNamespaceValid(namespace) {\n      return this.namespaceRegex.test(namespace);\n    }\n\n    isMultiNamespace(namespace) {\n      return namespace === this.allNamespacesKey_;\n    }\n\n    areMultipleNamespacesSelected() {\n      return this.current() ? this.current() === this.allNamespacesKey_ : true;\n    }\n\n  }\n\n  NamespaceService.ɵfac = function NamespaceService_Factory(t) {\n    return new (t || NamespaceService)(i0.ɵɵinject(CONFIG_DI_TOKEN));\n  };\n\n  NamespaceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NamespaceService,\n    factory: NamespaceService.ɵfac\n  });\n  return NamespaceService;\n})();","map":null,"metadata":{},"sourceType":"module"}