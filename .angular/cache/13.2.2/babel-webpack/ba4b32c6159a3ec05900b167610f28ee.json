{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { CONFIG_DI_TOKEN } from '../../../index.config';\nimport { CsrfTokenService } from './csrftoken';\nimport { KdStateService } from './state';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"./csrftoken\";\nimport * as i5 from \"./state\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(cookies_, router_, http_, csrfTokenService_, stateService_, config_) {\n      this.cookies_ = cookies_;\n      this.router_ = router_;\n      this.http_ = http_;\n      this.csrfTokenService_ = csrfTokenService_;\n      this.stateService_ = stateService_;\n      this.config_ = config_;\n      this.init_();\n    }\n\n    init_() {\n      this.stateService_.onBefore.pipe(switchMap(() => this.getLoginStatus())).subscribe(status => {\n        if (this.isAuthenticationEnabled(status)) {\n          this.refreshToken();\n        }\n      });\n    }\n\n    setTokenCookie_(token) {\n      if (!this.isLoginEnabled()) {\n        return;\n      }\n\n      if (this.isCurrentProtocolSecure_()) {\n        this.cookies_.set(this.config_.authTokenCookieName, token, null, null, null, true, 'Strict');\n        return;\n      }\n\n      if (this.isCurrentDomainSecure_()) {\n        this.cookies_.set(this.config_.authTokenCookieName, token, null, null, location.hostname, false, 'Strict');\n      }\n    }\n\n    getTokenCookie_() {\n      return this.cookies_.get(this.config_.authTokenCookieName) || '';\n    }\n\n    isCurrentDomainSecure_() {\n      return ['localhost', '127.0.0.1'].indexOf(location.hostname) > -1;\n    }\n\n    isCurrentProtocolSecure_() {\n      return location.protocol.includes('https');\n    }\n\n    removeAuthCookies() {\n      this.cookies_.delete(this.config_.authTokenCookieName);\n      this.cookies_.delete(this.config_.skipLoginPageCookieName);\n    }\n    /**\n     * Sends a login request to the backend with filled in login spec structure.\n     */\n\n\n    login(loginSpec) {\n      return this.csrfTokenService_.getTokenForAction('login').pipe(switchMap(csrfToken => this.http_.post('api/v1/login', loginSpec, {\n        headers: new HttpHeaders().set(this.config_.csrfHeaderName, csrfToken.token)\n      }))).pipe(switchMap(authResponse => {\n        if (authResponse.jweToken.length !== 0 && authResponse.errors.length === 0) {\n          this.setTokenCookie_(authResponse.jweToken);\n        }\n\n        return of(authResponse.errors);\n      }));\n    }\n\n    logout() {\n      this.removeAuthCookies();\n      this.router_.navigate(['login']);\n    }\n    /**\n     * Sends a token refresh request to the backend. In case user is not logged in\n     * with token nothing will happen.\n     */\n\n\n    refreshToken() {\n      const token = this.getTokenCookie_();\n      if (token.length === 0) return;\n      this.csrfTokenService_.getTokenForAction('token').pipe(switchMap(csrfToken => {\n        return this.http_.post('api/v1/token/refresh', {\n          jweToken: token\n        }, {\n          headers: new HttpHeaders().set(this.config_.csrfHeaderName, csrfToken.token)\n        });\n      })).pipe(take(1)).subscribe(authResponse => {\n        if (authResponse.jweToken.length !== 0 && authResponse.errors.length === 0) {\n          this.setTokenCookie_(authResponse.jweToken);\n          return authResponse.jweToken;\n        }\n\n        return authResponse.errors;\n      });\n    }\n    /** Checks if user is authenticated. */\n\n\n    isAuthenticated(loginStatus) {\n      return loginStatus.headerPresent || loginStatus.tokenPresent || !this.isLoginPageEnabled();\n    }\n    /**\n     * Checks authentication is enabled. It is enabled only on HTTPS. Can be\n     * overridden by 'enable-insecure-login' flag passed to dashboard.\n     */\n\n\n    isAuthenticationEnabled(loginStatus) {\n      return loginStatus.httpsMode;\n    }\n\n    getLoginStatus() {\n      return this.http_.get('api/v1/login/status');\n    }\n\n    skipLoginPage(skip) {\n      this.removeAuthCookies();\n      this.cookies_.set(this.config_.skipLoginPageCookieName, skip.toString(), null, null, null, false, 'Strict');\n    }\n    /**\n     * Returns true if user has selected to skip page, false otherwise.\n     * As cookie returns string or undefined we have to check for a string match.\n     * In case cookie is not set login page will also be visible.\n     */\n\n\n    isLoginPageEnabled() {\n      return !(this.cookies_.get(this.config_.skipLoginPageCookieName) === 'true');\n    }\n    /**\n     * Returns true if domain is localhost/127.0.0.1 or if the connection\n     * protocol is HTTPS, false otherwise.\n     */\n\n\n    isLoginEnabled() {\n      return this.isCurrentDomainSecure_() || this.isCurrentProtocolSecure_();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.CsrfTokenService), i0.ɵɵinject(i5.KdStateService), i0.ɵɵinject(CONFIG_DI_TOKEN));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}