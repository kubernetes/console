{"ast":null,"code":"import { GraphType } from '../graph/component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/flex-layout/flex\";\nimport * as i3 from \"../graphcard/component\";\n\nfunction GraphMetricsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵelement(2, \"kd-graph-card\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 2);\n    i0.ɵɵelement(4, \"kd-graph-card\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"graphType\", ctx_r0.GraphType.CPU)(\"metrics\", ctx_r0.metrics);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"graphType\", ctx_r0.GraphType.Memory)(\"metrics\", ctx_r0.metrics);\n  }\n}\n\nexport let GraphMetricsComponent = /*#__PURE__*/(() => {\n  class GraphMetricsComponent {\n    constructor() {\n      this.GraphType = GraphType;\n    }\n\n    showGraphs() {\n      return this.metrics && this.metrics.every(metrics => metrics.dataPoints && metrics.dataPoints.length > 1);\n    }\n\n  }\n\n  GraphMetricsComponent.ɵfac = function GraphMetricsComponent_Factory(t) {\n    return new (t || GraphMetricsComponent)();\n  };\n\n  GraphMetricsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GraphMetricsComponent,\n    selectors: [[\"kd-graph-metrics\"]],\n    inputs: {\n      metrics: \"metrics\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"fxLayout\", \"row\", 4, \"ngIf\"], [\"fxLayout\", \"row\"], [\"fxFlex\", \"50\"], [\"graphTitle\", \"CPU Usage\", \"selectedMetricName\", \"cpu/usage_rate\", 3, \"graphType\", \"metrics\"], [\"graphTitle\", \"Memory Usage\", \"selectedMetricName\", \"memory/usage\", 3, \"graphType\", \"metrics\"]],\n    template: function GraphMetricsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, GraphMetricsComponent_div_0_Template, 5, 4, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.showGraphs());\n      }\n    },\n    directives: [i1.NgIf, i2.DefaultLayoutDirective, i2.DefaultFlexDirective, i3.GraphCardComponent],\n    encapsulation: 2\n  });\n  return GraphMetricsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}