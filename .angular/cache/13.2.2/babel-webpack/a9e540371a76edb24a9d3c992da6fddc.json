{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Subject, timer } from 'rxjs';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/tooltip\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../pipes/relativetime\";\n/**\n * Display a date\n *\n * Examples:\n *\n * Display the date:\n * <kd-date [date]=\"object.timestamp\"></kd-date>\n *\n * Display the age of the date, and the date in a tooltip:\n * <kd-date [date]=\"object.timestamp\" relative></kd-date>\n *\n * Display the date in the shprt format:\n * <kd-date [date]=\"object.timestamp\" format=\"short\"></kd-date>\n *\n * Display the age of the date, and the date in the short format in a tooltip:\n * <kd-date [date]=\"object.timestamp\" relative format=\"short\"></kd-date>\n *\n */\n\nexport let DateComponent = /*#__PURE__*/(() => {\n  class DateComponent {\n    constructor(cdr_) {\n      this.cdr_ = cdr_;\n      this.format = 'medium';\n      this.iteration = 0;\n      this.intervalChanged_ = new Subject();\n      this.timeBaseIntervals_ = [60, 60, 24 // Hours in a day\n      ];\n      this.unsubscribe_ = new Subject();\n    }\n\n    set relative(v) {\n      this.relative_ = v !== undefined && v !== false;\n    }\n\n    get relative() {\n      return this.relative_;\n    }\n\n    ngOnChanges() {\n      if (this.relative_) {\n        this.intervalChanged_.pipe(switchMap(_ => timer(0, this.refreshInterval_))).pipe(takeUntil(this.unsubscribe_)).subscribe(_ => {\n          this.cdr_.markForCheck();\n          this.iteration++; // Check if refresh interval should be updated\n\n          const interval = this.calculateRefreshInterval_(this.getTimePassed_());\n\n          if (interval !== this.refreshInterval_ / 1000) {\n            this.setRefreshInterval_(interval);\n          }\n        }); // Kick off the check interval\n\n        this.setRefreshInterval_(1);\n      }\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe_.next();\n      this.unsubscribe_.complete();\n    } // Calculates timer refresh interval that should be used based on time that has passed.\n    // 1 - 59s -> 1 second\n    // 1m - 59m59s -> 1 minute\n    // 1h - 23h59m59s -> 1 hour\n    // > 1 day -> 1 day\n\n\n    calculateRefreshInterval_(passed) {\n      let power = 0;\n      let interval = 1;\n\n      while (power < this.timeBaseIntervals_.length && passed / this.timeBaseIntervals_[power] >= 1) {\n        passed /= this.timeBaseIntervals_[power];\n        power++;\n      }\n\n      while (power > 0) {\n        interval *= this.timeBaseIntervals_[--power];\n      }\n\n      return interval;\n    } // Returns how much time has passed (in seconds) between the provided date and current time.\n\n\n    getTimePassed_() {\n      return Math.floor((new Date().getTime() - new Date(this.date).getTime()) / 1000);\n    } // Takes the interval in seconds and updates currently running timer to use the new interval\n\n\n    setRefreshInterval_(interval) {\n      this.refreshInterval_ = interval * 1000;\n      this.intervalChanged_.next();\n    }\n\n  }\n\n  DateComponent.ɵfac = function DateComponent_Factory(t) {\n    return new (t || DateComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  DateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DateComponent,\n    selectors: [[\"kd-date\"]],\n    inputs: {\n      date: \"date\",\n      format: \"format\",\n      relative: \"relative\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 10,\n    consts: [[1, \"kd-date\", 3, \"matTooltip\"]],\n    template: function DateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵpipe(1, \"date\");\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"kdRelativeTime\");\n        i0.ɵɵpipe(4, \"date\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"matTooltip\", i0.ɵɵpipeBind2(1, 2, ctx.date, ctx.format));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.relative ? i0.ɵɵpipeBind2(3, 5, ctx.date, ctx.iteration) : i0.ɵɵpipeBind1(4, 8, ctx.date), \"\\n\");\n      }\n    },\n    directives: [i1.MatTooltip],\n    pipes: [i2.DatePipe, i3.RelativeTimeFormatter],\n    styles: [\".kd-date[_ngcontent-%COMP%] {\\n  -webkit-text-decoration: underline dotted;\\n          text-decoration: underline dotted;\\n}\"],\n    changeDetection: 0\n  });\n  return DateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}