{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { AlertDialog } from '../../dialogs/alert/dialog';\nimport { DeleteResourceDialog } from '../../dialogs/deleteresource/dialog';\nimport { EditResourceDialog } from '../../dialogs/editresource/dialog';\nimport { RestartResourceDialog } from '../../dialogs/restartresource/dialog';\nimport { ScaleResourceDialog } from '../../dialogs/scaleresource/dialog';\nimport { TriggerResourceDialog } from '../../dialogs/triggerresource/dialog';\nimport { RawResource } from '../../resources/rawresource';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common/http\";\nexport let VerberService = /*#__PURE__*/(() => {\n  class VerberService {\n    constructor(dialog_, http_) {\n      this.dialog_ = dialog_;\n      this.http_ = http_;\n      this.onDelete = new EventEmitter();\n      this.onEdit = new EventEmitter();\n      this.onScale = new EventEmitter();\n      this.onTrigger = new EventEmitter();\n      this.onRestart = new EventEmitter();\n    }\n\n    showDeleteDialog(displayName, typeMeta, objectMeta) {\n      const dialogConfig = this.getDialogConfig_(displayName, typeMeta, objectMeta);\n      this.dialog_.open(DeleteResourceDialog, dialogConfig).afterClosed().pipe(filter(doDelete => doDelete)).pipe(switchMap(_ => {\n        let url = RawResource.getUrl(typeMeta, objectMeta);\n\n        if (typeMeta.kind === 'IngressRoute') {\n          url = 'api/v1/crd/' + objectMeta.namespace + '/ingressroutes.traefik.containo.us/traefik/ingressroutes/' + objectMeta.name;\n        } else if (typeMeta.kind === 'IngressRouteTCP') {\n          url = 'api/v1/crd/' + objectMeta.namespace + '/ingressroutetcps.traefik.containo.us/traefik/ingressroutetcps/' + objectMeta.name;\n        }\n\n        return this.http_.delete(url, {\n          responseType: 'text'\n        });\n      })).subscribe(_ => this.onDelete.emit(true), this.handleErrorResponse_.bind(this));\n    }\n\n    showEditDialog(displayName, typeMeta, objectMeta) {\n      const dialogConfig = this.getDialogConfig_(displayName, typeMeta, objectMeta);\n      this.dialog_.open(EditResourceDialog, dialogConfig).afterClosed().pipe(filter(result => result)).pipe(switchMap(result => {\n        let url = RawResource.getUrl(typeMeta, objectMeta);\n\n        if (typeMeta.kind === 'IngressRoute') {\n          url = 'api/v1/crd/' + objectMeta.namespace + '/ingressroutes.traefik.containo.us/traefik/ingressroutes/' + objectMeta.name;\n        } else if (typeMeta.kind === 'IngressRouteTCP') {\n          url = 'api/v1/crd/' + objectMeta.namespace + '/ingressroutetcps.traefik.containo.us/traefik/ingressroutetcps/' + objectMeta.name;\n        }\n\n        return this.http_.put(url, JSON.parse(result), {\n          headers: this.getHttpHeaders_(),\n          responseType: 'text'\n        });\n      })).subscribe(_ => this.onEdit.emit(true), this.handleErrorResponse_.bind(this));\n    }\n\n    showRestartDialog(displayName, typeMeta, objectMeta) {\n      const dialogConfig = this.getDialogConfig_(displayName, typeMeta, objectMeta);\n      this.dialog_.open(RestartResourceDialog, dialogConfig).afterClosed().pipe(filter(result => result)).pipe(switchMap(_ => {\n        const url = `api/v1/${typeMeta.kind}/${objectMeta.namespace}/${objectMeta.name}/restart`;\n        return this.http_.put(url, {\n          responseType: 'text'\n        });\n      })).subscribe(_ => this.onTrigger.emit(true), this.handleErrorResponse_.bind(this));\n    }\n\n    showScaleDialog(displayName, typeMeta, objectMeta) {\n      const dialogConfig = this.getDialogConfig_(displayName, typeMeta, objectMeta);\n      this.dialog_.open(ScaleResourceDialog, dialogConfig).afterClosed().pipe(filter(result => Number.isInteger(result))).pipe(switchMap(result => {\n        const url = `api/v1/scale/${typeMeta.kind}${objectMeta.namespace ? `/${objectMeta.namespace}` : ''}/${objectMeta.name}/`;\n        return this.http_.put(url, {\n          scaleBy: result\n        }, {\n          params: {\n            scaleBy: result\n          }\n        });\n      })).subscribe(_ => this.onScale.emit(true), this.handleErrorResponse_.bind(this));\n    }\n\n    showTriggerDialog(displayName, typeMeta, objectMeta) {\n      const dialogConfig = this.getDialogConfig_(displayName, typeMeta, objectMeta);\n      this.dialog_.open(TriggerResourceDialog, dialogConfig).afterClosed().pipe(filter(result => result)).pipe(switchMap(_ => {\n        const url = `api/v1/cronjob/${objectMeta.namespace}/${objectMeta.name}/trigger`;\n        return this.http_.put(url, {}, {\n          responseType: 'text'\n        });\n      })).subscribe(_ => this.onTrigger.emit(true), this.handleErrorResponse_.bind(this));\n    }\n\n    getDialogConfig_(displayName, typeMeta, objectMeta) {\n      return {\n        width: '900px',\n        data: {\n          displayName,\n          typeMeta,\n          objectMeta\n        }\n      };\n    }\n\n    handleErrorResponse_(err) {\n      if (err) {\n        const alertDialogConfig = {\n          width: '630px',\n          data: {\n            title: err.statusText === 'OK' ? 'Internal server error' : err.statusText,\n            message: err.error || 'Could not perform the operation.',\n            confirmLabel: 'OK'\n          }\n        };\n        this.dialog_.open(AlertDialog, alertDialogConfig);\n      }\n    }\n\n    getHttpHeaders_() {\n      const headers = new HttpHeaders();\n      headers.set('Content-Type', 'application/json');\n      headers.set('Accept', 'application/json');\n      return headers;\n    }\n\n  }\n\n  VerberService.ɵfac = function VerberService_Factory(t) {\n    return new (t || VerberService)(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  VerberService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VerberService,\n    factory: VerberService.ɵfac\n  });\n  return VerberService;\n})();","map":null,"metadata":{},"sourceType":"module"}