{"ast":null,"code":"import { ActivatedRouteSnapshot, Params, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { SEARCH_QUERY_STATE_PARAM } from '../../params/params';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let SearchGuard = /*#__PURE__*/(() => {\n  class SearchGuard {\n    constructor(router_) {\n      this.router_ = router_;\n      this.queryParamSeparator_ = '&';\n      this.queryParamStart_ = '?';\n    }\n\n    canDeactivate(_cmp, _route, _routeSnapshot, nextState) {\n      let url = nextState.url;\n      const queryParams = this.getQueryParams_(url);\n\n      if (queryParams[SEARCH_QUERY_STATE_PARAM]) {\n        url = this.removeQueryParamFromUrl_(url);\n        return this.router_.parseUrl(url);\n      }\n\n      return true;\n    }\n\n    getQueryParams_(url) {\n      const paramMap = {};\n      const queryStartIdx = url.indexOf(this.queryParamStart_) + 1;\n      const partials = url.substring(queryStartIdx).split(this.queryParamSeparator_);\n\n      for (const partial of partials) {\n        const params = partial.split('=');\n\n        if (params.length === 2) {\n          paramMap[params[0]] = params[1];\n        }\n      }\n\n      return paramMap;\n    }\n\n    removeQueryParamFromUrl_(url) {\n      const queryStartIdx = url.indexOf(this.queryParamStart_) + 1;\n      const rawUrl = url.substring(0, queryStartIdx - 1);\n      const paramMap = this.getQueryParams_(url);\n\n      if (paramMap[SEARCH_QUERY_STATE_PARAM]) {\n        delete paramMap[SEARCH_QUERY_STATE_PARAM];\n      }\n\n      const queryParams = Object.keys(paramMap).map(key => `${key}=${paramMap[key]}`).join(this.queryParamSeparator_);\n      return `${rawUrl}${this.queryParamStart_}${queryParams}`;\n    }\n\n  }\n\n  SearchGuard.ɵfac = function SearchGuard_Factory(t) {\n    return new (t || SearchGuard)(i0.ɵɵinject(i1.Router));\n  };\n\n  SearchGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchGuard,\n    factory: SearchGuard.ɵfac\n  });\n  return SearchGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}