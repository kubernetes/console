{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Injector, ViewContainerRef } from '@angular/core';\nimport { PluginLoaderService } from '@common/services/pluginloader/pluginloader.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@common/services/pluginloader/pluginloader.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nconst _c0 = [\"pluginViewRef\"];\n\nfunction PluginHolderComponent_mat_card_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\");\n    i0.ɵɵtext(1, \"This plugin has no entry component\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PluginHolderComponent_ng_template_3_Template(rf, ctx) {}\n\nexport let PluginHolderComponent = /*#__PURE__*/(() => {\n  class PluginHolderComponent {\n    constructor(injector, pluginLoader) {\n      this.injector = injector;\n      this.pluginLoader = pluginLoader;\n      this.entryError = false;\n    }\n\n    ngOnInit() {\n      try {\n        this.loadPlugin(this.pluginName);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    loadPlugin(pluginName) {\n      this.pluginLoader.load(pluginName).then(moduleFactory => {\n        const moduleRef = moduleFactory.create(this.injector);\n        const entryComponent = moduleFactory.moduleType.entry;\n\n        try {\n          const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);\n          this.vcRef.createComponent(compFactory);\n        } catch (e) {\n          this.entryError = true;\n        }\n      });\n    }\n\n  }\n\n  PluginHolderComponent.ɵfac = function PluginHolderComponent_Factory(t) {\n    return new (t || PluginHolderComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.PluginLoaderService));\n  };\n\n  PluginHolderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PluginHolderComponent,\n    selectors: [[\"kd-plugin-holder\"]],\n    viewQuery: function PluginHolderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.vcRef = _t.first);\n      }\n    },\n    inputs: {\n      pluginName: \"pluginName\"\n    },\n    decls: 6,\n    vars: 1,\n    consts: [[1, \"plugin\"], [4, \"ngIf\"], [\"pluginViewRef\", \"\", \"elseBlock\", \"\"]],\n    template: function PluginHolderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵtemplate(2, PluginHolderComponent_mat_card_2_Template, 2, 0, \"mat-card\", 1);\n        i0.ɵɵtemplate(3, PluginHolderComponent_ng_template_3_Template, 0, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.entryError);\n      }\n    },\n    directives: [i2.NgIf, i3.MatCard],\n    encapsulation: 2\n  });\n  return PluginHolderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}