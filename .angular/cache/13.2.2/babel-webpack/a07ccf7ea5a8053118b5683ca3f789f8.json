{"ast":null,"code":"import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport { POD_DETAIL_ROUTE } from '../../../resource/workloads/pod/routing';\nimport { REPLICASET_DETAIL_ROUTE } from '../../../resource/workloads/replicaset/routing';\nimport { REPLICATIONCONTROLLER_DETAIL_ROUTE } from '../../../resource/workloads/replicationcontroller/routing';\nimport { SEARCH_QUERY_STATE_PARAM } from '../../params/params';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/flex-layout/flex\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/flex-layout/extended\";\nimport * as i5 from \"@angular/material/icon\";\n\nfunction BreadcrumbsComponent_div_1_mat_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1, \" keyboard_arrow_right \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"kd-inline-breadcrumb\": a0\n  };\n};\n\nconst _c1 = function (a0) {\n  return {\n    \"kd-faded-breadcrumb\": a0\n  };\n};\n\nfunction BreadcrumbsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"a\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, BreadcrumbsComponent_div_1_mat_icon_3_Template, 2, 0, \"mat-icon\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const breadcrumb_r1 = ctx.$implicit;\n    const last_r2 = ctx.last;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, !last_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", breadcrumb_r1.stateLink)(\"ngClass\", i0.ɵɵpureFunction1(7, _c1, !last_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", breadcrumb_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !last_r2);\n  }\n}\n\nexport const LOGS_PARENT_PLACEHOLDER = '___LOGS_PARENT_PLACEHOLDER___';\nexport const EXEC_PARENT_PLACEHOLDER = '___EXEC_PARENT_PLACEHOLDER___';\nexport const SEARCH_BREADCRUMB_PLACEHOLDER = '___SEARCH_BREADCRUMB_PLACEHOLDER___';\nexport let BreadcrumbsComponent = /*#__PURE__*/(() => {\n  class BreadcrumbsComponent {\n    constructor(_router, _activatedRoute) {\n      this._router = _router;\n      this._activatedRoute = _activatedRoute;\n    }\n\n    ngOnInit() {\n      this._initBreadcrumbs();\n\n      this._registerNavigationHook();\n    }\n\n    _registerNavigationHook() {\n      this._router.events.pipe(filter(event => event instanceof NavigationEnd), distinctUntilChanged()).subscribe(() => {\n        this._initBreadcrumbs();\n      });\n    }\n\n    _initBreadcrumbs() {\n      const currentRoute = this._getCurrentRoute();\n\n      const url = this._router.url.includes('?') ? this._router.url.split('?')[0] : '';\n      let urlArray = url.split('/');\n      let routeParamsCount = currentRoute.routeConfig.data && currentRoute.routeConfig.data.routeParamsCount ? +currentRoute.routeConfig.data.routeParamsCount : currentRoute.routeConfig.path.split('/').length;\n      this.breadcrumbs = [{\n        label: this._getBreadcrumbLabel(currentRoute.routeConfig, currentRoute.snapshot.params),\n        stateLink: currentRoute.routeConfig.data && currentRoute.routeConfig.data.link ? currentRoute.routeConfig.data.link : urlArray\n      }];\n      let route;\n\n      if (currentRoute && currentRoute.routeConfig && currentRoute.routeConfig.data && currentRoute.routeConfig.data.parent) {\n        if (currentRoute.routeConfig.data.parent === LOGS_PARENT_PLACEHOLDER) {\n          route = this._getLogsParent(currentRoute.snapshot.params);\n          urlArray = ['', urlArray[urlArray.length - 1], urlArray[urlArray.length - 3], urlArray[urlArray.length - 2]];\n          routeParamsCount = 0;\n        } else if (currentRoute.routeConfig.data.parent === EXEC_PARENT_PLACEHOLDER) {\n          route = POD_DETAIL_ROUTE;\n          urlArray = ['', 'pod', urlArray[urlArray.length - 3], urlArray[urlArray.length - 2]];\n          routeParamsCount = 0;\n        } else {\n          route = currentRoute.routeConfig.data.parent;\n        }\n\n        while (route) {\n          // Trim URL by number of path parameters defined on previous route.\n          urlArray = urlArray.slice(0, urlArray.length - routeParamsCount);\n          routeParamsCount = route.path.split('/').length;\n          this.breadcrumbs.push({\n            label: this._getBreadcrumbLabel(route, currentRoute.snapshot.params),\n            stateLink: route.data.link ? route.data.link : urlArray\n          }); // Explore the route tree to the root route (parent references have to be defined by us on\n          // each route).\n\n          if (route && route.data && route.data.parent) {\n            route = route.data.parent;\n          } else {\n            break;\n          }\n        }\n      }\n\n      this.breadcrumbs.reverse();\n    }\n\n    _getLogsParent(params) {\n      const resourceType = params['resourceType'];\n\n      if (resourceType === 'pod') {\n        return POD_DETAIL_ROUTE;\n      } else if (resourceType === 'replicationcontroller') {\n        return REPLICATIONCONTROLLER_DETAIL_ROUTE;\n      } else if (resourceType === 'replicaset') {\n        return REPLICASET_DETAIL_ROUTE;\n      }\n\n      return undefined;\n    }\n\n    _getCurrentRoute() {\n      let route = this._activatedRoute.root;\n\n      while (route && route.firstChild) {\n        route = route.firstChild;\n      }\n\n      return route;\n    }\n\n    _getBreadcrumbLabel(route, params) {\n      if (route && route.data && route.data.breadcrumb) {\n        let breadcrumb = route.data.breadcrumb;\n\n        if (breadcrumb.startsWith('{{') && breadcrumb.endsWith('}}')) {\n          breadcrumb = breadcrumb.slice(2, breadcrumb.length - 2).trim();\n          breadcrumb = params[breadcrumb];\n        } else if (breadcrumb === SEARCH_BREADCRUMB_PLACEHOLDER) {\n          return `Search for ${this._activatedRoute.snapshot.queryParams[SEARCH_QUERY_STATE_PARAM]}`;\n        }\n\n        return breadcrumb;\n      } else if (route && route.component) {\n        return route.component.name;\n      }\n\n      return 'Unknown';\n    }\n\n  }\n\n  BreadcrumbsComponent.ɵfac = function BreadcrumbsComponent_Factory(t) {\n    return new (t || BreadcrumbsComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n  };\n\n  BreadcrumbsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BreadcrumbsComponent,\n    selectors: [[\"kd-breadcrumbs\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[\"fxFlex\", \"auto\", 1, \"kd-breadcrumbs-container\", \"kd-accent\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [\"queryParamsHandling\", \"preserve\", 3, \"routerLink\", \"ngClass\"], [\"class\", \"kd-faded-breadcrumb kd-breadcrumb-divider\", 4, \"ngIf\"], [1, \"kd-faded-breadcrumb\", \"kd-breadcrumb-divider\"]],\n    template: function BreadcrumbsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, BreadcrumbsComponent_div_1_Template, 4, 9, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.breadcrumbs);\n      }\n    },\n    directives: [i2.DefaultFlexDirective, i3.NgForOf, i3.NgClass, i4.DefaultClassDirective, i1.RouterLinkWithHref, i3.NgIf, i5.MatIcon],\n    styles: [\".kd-breadcrumbs-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  font-size: 18px;\\n  padding: 2px 0 0 8px;\\n}\\n.kd-breadcrumbs-container[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n  color: inherit;\\n}\\n.kd-faded-breadcrumb[_ngcontent-%COMP%] {\\n  color: inherit;\\n  opacity: 0.54;\\n}\\n.kd-inline-breadcrumb[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n.kd-breadcrumb-divider[_ngcontent-%COMP%] {\\n  align-self: center;\\n  padding: 0 4px;\\n}\"]\n  });\n  return BreadcrumbsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}