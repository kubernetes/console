{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LogService = /*#__PURE__*/(() => {\n  class LogService {\n    constructor(http_) {\n      this.http_ = http_;\n      this.previous_ = false;\n      this.inverted_ = false;\n      this.compact_ = false;\n      this.showTimestamp_ = false;\n      this.following_ = false;\n      this.autoRefresh_ = false;\n    }\n\n    getResource(uri, params) {\n      return this.http_.get(`api/v1/log/${uri}`, {\n        params\n      });\n    }\n\n    setFollowing(status) {\n      this.following_ = status;\n    }\n\n    getFollowing() {\n      return this.following_;\n    }\n\n    toggleAutoRefresh() {\n      this.autoRefresh_ = !this.autoRefresh_;\n    }\n\n    getAutoRefresh() {\n      return this.autoRefresh_;\n    }\n\n    togglePrevious() {\n      this.previous_ = !this.previous_;\n    }\n\n    getPrevious() {\n      return this.previous_;\n    }\n\n    toggleInverted() {\n      this.inverted_ = !this.inverted_;\n    }\n\n    getInverted() {\n      return this.inverted_;\n    }\n\n    toggleCompact() {\n      this.compact_ = !this.compact_;\n    }\n\n    getCompact() {\n      return this.compact_;\n    }\n\n    toggleShowTimestamp() {\n      this.showTimestamp_ = !this.showTimestamp_;\n    }\n\n    getShowTimestamp() {\n      return this.showTimestamp_;\n    }\n\n    getLogFileName(pod, container) {\n      return `logs-from-${container}-in-${pod}.log`;\n    }\n\n  }\n\n  LogService.ɵfac = function LogService_Factory(t) {\n    return new (t || LogService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogService,\n    factory: LogService.ɵfac\n  });\n  return LogService;\n})();","map":null,"metadata":{},"sourceType":"module"}