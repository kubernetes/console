{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AlertDialog } from '../../dialogs/alert/dialog';\nimport { VerberService } from './verber';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./verber\";\nexport let PinnerService = /*#__PURE__*/(() => {\n  class PinnerService {\n    constructor(dialog_, http_, verber_) {\n      this.dialog_ = dialog_;\n      this.http_ = http_;\n      this.verber_ = verber_;\n      this.onPinUpdate = new Subject();\n      this.isInitialized_ = false;\n      this.pinnedResources_ = [];\n      this.endpoint_ = 'api/v1/settings/pinner';\n    }\n\n    init() {\n      this.load();\n      this.onPinUpdate.subscribe(() => this.load());\n      this.verber_.onDelete.subscribe(() => this.load());\n    }\n\n    load() {\n      this.http_.get(this.endpoint_).subscribe(resources => {\n        this.pinnedResources_ = resources;\n        this.isInitialized_ = true;\n      });\n    }\n\n    isInitialized() {\n      return this.isInitialized_;\n    }\n\n    pin(kind, name, namespace, displayName, namespaced) {\n      this.http_.put(this.endpoint_, {\n        kind,\n        name,\n        namespace,\n        displayName,\n        namespaced\n      }).subscribe(() => this.onPinUpdate.next(), this.handleErrorResponse_.bind(this));\n    }\n\n    unpin(kind, name, namespace) {\n      let url = `${this.endpoint_}/${kind}`;\n\n      if (namespace !== undefined) {\n        url += `/${namespace}`;\n      }\n\n      url += `/${name}`;\n      this.http_.delete(url).subscribe(() => this.onPinUpdate.next(), this.handleErrorResponse_.bind(this));\n    }\n\n    unpinResource(resource) {\n      this.unpin(resource.kind, resource.name, resource.namespace);\n    }\n\n    isPinned(kind, name, namespace) {\n      for (const pinnedResource of this.pinnedResources_) {\n        if (pinnedResource.name === name && pinnedResource.kind === kind && pinnedResource.namespace === namespace) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    getPinnedForKind(kind) {\n      const resources = [];\n\n      for (const pinnedResource of this.pinnedResources_) {\n        if (pinnedResource.kind === kind) {\n          resources.push(pinnedResource);\n        }\n      }\n\n      return resources;\n    }\n\n    handleErrorResponse_(err) {\n      if (err) {\n        const alertDialogConfig = {\n          width: '630px',\n          data: {\n            title: err.statusText === 'OK' ? 'Internal server error' : err.statusText,\n            message: err.error || 'Could not perform the operation.',\n            confirmLabel: 'OK'\n          }\n        };\n        this.dialog_.open(AlertDialog, alertDialogConfig);\n      }\n    }\n\n  }\n\n  PinnerService.ɵfac = function PinnerService_Factory(t) {\n    return new (t || PinnerService)(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.VerberService));\n  };\n\n  PinnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PinnerService,\n    factory: PinnerService.ɵfac\n  });\n  return PinnerService;\n})();","map":null,"metadata":{},"sourceType":"module"}