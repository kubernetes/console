{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { ChangeDetectorRef, EventEmitter, Type } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { isObservable, merge, Subject } from 'rxjs';\nimport { startWith, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { CardListFilterComponent } from '../components/list/filter/component';\nimport { SEARCH_QUERY_STATE_PARAM } from '../params/params';\nimport { GlobalSettingsService } from '../services/global/globalsettings';\nimport { GlobalServicesModule } from '../services/global/module';\nimport { NamespaceService } from '../services/global/namespace';\nimport { NotificationsService } from '../services/global/notifications';\nimport { ParamsService } from '../services/global/params';\nimport { KdStateService } from '../services/global/state';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/global/notifications\";\nvar SortableColumn = /*#__PURE__*/(() => {\n  (function (SortableColumn) {\n    SortableColumn[\"Name\"] = \"name\";\n    SortableColumn[\"Created\"] = \"created\";\n    SortableColumn[\"Namespace\"] = \"namespace\";\n    SortableColumn[\"Status\"] = \"status\";\n    SortableColumn[\"FirstSeen\"] = \"firstSeen\";\n    SortableColumn[\"LastSeen\"] = \"lastSeen\";\n  })(SortableColumn || (SortableColumn = {}));\n\n  return SortableColumn;\n})();\nexport let ResourceListBase = /*#__PURE__*/(() => {\n  class ResourceListBase {\n    constructor(stateName, notifications_, cdr_) {\n      this.notifications_ = notifications_;\n      this.cdr_ = cdr_;\n      this.isLoading = false;\n      this.totalItems = 0;\n      this.onChange = new EventEmitter();\n      this.hideable = false;\n      this.unsubscribe_ = new Subject(); // Base properties\n\n      this.actionColumns_ = [];\n      this.data_ = new MatTableDataSource();\n      this.stateName_ = '';\n      this.listUpdates_ = new Subject();\n      this.loaded_ = false;\n      this.dynamicColumns_ = [];\n      this.settingsService_ = GlobalServicesModule.injector.get(GlobalSettingsService);\n      this.kdState_ = GlobalServicesModule.injector.get(KdStateService);\n      this.namespaceService_ = GlobalServicesModule.injector.get(NamespaceService);\n      this.paramsService_ = GlobalServicesModule.injector.get(ParamsService);\n      this.router_ = GlobalServicesModule.injector.get(Router);\n      this.initStateName_(stateName);\n    }\n\n    get itemsPerPage() {\n      return this.settingsService_.getItemsPerPage();\n    }\n\n    ngOnInit() {\n      if (!this.id) {\n        throw Error('ID is a required attribute of list component.');\n      }\n\n      if (this.matPaginator_ === undefined) {\n        throw Error('MatPaginator has to be defined on a table.');\n      }\n\n      this.namespaceService_.onNamespaceChangeEvent.subscribe(() => {\n        this.isLoading = true;\n        this.listUpdates_.next();\n      });\n      this.paramsService_.onParamChange.subscribe(() => {\n        this.isLoading = true;\n        this.listUpdates_.next();\n      });\n      this.getObservableWithDataSelect_().pipe(startWith({})).pipe(tap(_ => this.isLoading = true)).pipe(switchMap(() => this.getResourceObservable(this.getDataSelectParams_()))).pipe(takeUntil(this.unsubscribe_)).subscribe(data => {\n        this.notifications_.pushErrors(data.errors);\n        this.totalItems = data.listMeta.totalItems;\n        this.data_.data = this.map(data);\n        this.isLoading = false;\n        this.loaded_ = true;\n        this.onListChange_(data);\n\n        if (this.cdr_) {\n          this.cdr_.markForCheck();\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe_.next();\n      this.unsubscribe_.complete();\n    }\n\n    getDetailsHref(resourceName, namespace) {\n      return this.stateName_ ? this.kdState_.href(this.stateName_, resourceName, namespace) : '';\n    }\n\n    getData() {\n      return this.data_;\n    }\n\n    trackByResource(_, item) {\n      if (item.objectMeta.uid) {\n        return item.objectMeta.uid;\n      }\n\n      if (item.objectMeta.namespace) {\n        return `${item.objectMeta.namespace}/${item.objectMeta.name}`;\n      }\n\n      return item.objectMeta.name;\n    }\n\n    showZeroState() {\n      return this.totalItems === 0 && !this.isLoading;\n    }\n\n    isHidden() {\n      return this.hideable && !this.filtered_() && this.showZeroState();\n    }\n\n    getColumns() {\n      const displayColumns = this.getDisplayColumns();\n      const actionColumns = this.actionColumns_.map(col => col.name);\n\n      for (const condition of this.dynamicColumns_) {\n        if (condition.whenCallback()) {\n          const afterColIdx = displayColumns.indexOf(condition.afterCol);\n          displayColumns.splice(afterColIdx + 1, 0, condition.col);\n        }\n      }\n\n      return displayColumns.concat(...actionColumns);\n    }\n\n    getActionColumns() {\n      return this.actionColumns_;\n    }\n\n    shouldShowColumn(dynamicColName) {\n      const col = this.dynamicColumns_.find(condition => {\n        return condition.col === dynamicColName;\n      });\n\n      if (col !== undefined) {\n        return col.whenCallback();\n      }\n\n      return false;\n    }\n\n    registerActionColumn(name, component) {\n      this.actionColumns_.push({\n        name: `action-${name}`,\n        component\n      });\n    }\n\n    registerDynamicColumn(col, afterCol, whenCallback) {\n      this.dynamicColumns_.push({\n        col,\n        afterCol,\n        whenCallback\n      });\n    }\n\n    initStateName_(stateName) {\n      if (isObservable(stateName)) {\n        stateName.pipe(takeUntil(this.unsubscribe_)).subscribe(name => this.stateName_ = name);\n      } else {\n        this.stateName_ = stateName;\n      }\n    }\n\n    getObservableWithDataSelect_() {\n      const obsInput = [this.matPaginator_.page];\n\n      if (this.matSort_) {\n        this.matSort_.sortChange.subscribe(() => this.matPaginator_.pageIndex = 0);\n        obsInput.push(this.matSort_.sortChange);\n      }\n\n      if (this.cardFilter_) {\n        this.cardFilter_.filterEvent.subscribe(() => this.matPaginator_.pageIndex = 0);\n        obsInput.push(this.cardFilter_.filterEvent);\n      }\n\n      return merge(...obsInput, this.listUpdates_);\n    }\n\n    getDataSelectParams_() {\n      let params = this.paginate_();\n\n      if (this.matSort_) {\n        params = this.sort_(params);\n      }\n\n      if (this.cardFilter_) {\n        params = this.filter_(params);\n      }\n\n      return this.search_(params);\n    }\n\n    sort_(params) {\n      let result = new HttpParams();\n\n      if (params) {\n        result = params;\n      }\n\n      return result.set('sortBy', this.getSortBy_());\n    }\n\n    paginate_(params) {\n      let result = new HttpParams();\n\n      if (params) {\n        result = params;\n      }\n\n      return result.set('itemsPerPage', `${this.itemsPerPage}`).set('page', `${this.matPaginator_.pageIndex + 1}`);\n    }\n\n    filter_(params) {\n      let result = new HttpParams();\n\n      if (params) {\n        result = params;\n      }\n\n      const filterByQuery = this.cardFilter_.query ? `name,${this.cardFilter_.query}` : '';\n\n      if (filterByQuery) {\n        return result.set('filterBy', filterByQuery);\n      }\n\n      return result;\n    }\n\n    search_(params) {\n      let result = new HttpParams();\n\n      if (params) {\n        result = params;\n      }\n\n      let filterByQuery = result.get('filterBy') || '';\n\n      if (this.router_.routerState.snapshot.url.startsWith('/search')) {\n        const query = this.paramsService_.getQueryParam(SEARCH_QUERY_STATE_PARAM);\n\n        if (query) {\n          if (filterByQuery) {\n            filterByQuery += ',';\n          }\n\n          filterByQuery += `name,${query}`;\n        }\n      }\n\n      if (filterByQuery) {\n        return result.set('filterBy', filterByQuery);\n      }\n\n      return result;\n    }\n\n    filtered_() {\n      return !!this.filter_().get('filterBy');\n    }\n\n    getSortBy_() {\n      // Default values.\n      let ascending = true;\n      let active = SortableColumn.Created;\n\n      if (this.matSort_.direction) {\n        ascending = this.matSort_.direction === 'asc';\n      }\n\n      if (this.matSort_.active) {\n        active = this.matSort_.active;\n      }\n\n      if ([SortableColumn.Created, SortableColumn.FirstSeen, SortableColumn.LastSeen].includes(active)) {\n        ascending = !ascending;\n      }\n\n      return `${ascending ? 'a' : 'd'},${this.mapToBackendValue_(active)}`;\n    }\n\n    mapToBackendValue_(sortByColumnName) {\n      return sortByColumnName === SortableColumn.Created ? 'creationTimestamp' : sortByColumnName;\n    }\n\n    onListChange_(data) {\n      const emitValue = {\n        id: this.id,\n        groupId: this.groupId,\n        items: this.totalItems,\n        filtered: false,\n        resourceList: data\n      };\n\n      if (this.cardFilter_) {\n        emitValue.filtered = this.filtered_();\n      }\n\n      this.onChange.emit(emitValue);\n    }\n\n  }\n\n  ResourceListBase.ɵfac = function ResourceListBase_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  ResourceListBase.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ResourceListBase,\n    viewQuery: function ResourceListBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatSort, 7);\n        i0.ɵɵviewQuery(MatPaginator, 7);\n        i0.ɵɵviewQuery(CardListFilterComponent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matSort_ = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matPaginator_ = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cardFilter_ = _t.first);\n      }\n    },\n    inputs: {\n      groupId: \"groupId\",\n      hideable: \"hideable\",\n      id: \"id\"\n    },\n    outputs: {\n      onChange: \"onchange\"\n    }\n  });\n  return ResourceListBase;\n})();\nexport let ResourceListWithStatuses = /*#__PURE__*/(() => {\n  class ResourceListWithStatuses extends ResourceListBase {\n    constructor(stateName, notifications, cdr) {\n      super(stateName, notifications, cdr);\n      this.notifications = notifications;\n      this.expandedRowKey = undefined;\n      this.hoveredRowKey = undefined;\n      this.icon = IconName;\n      this.bindings_ = {};\n      this.unknownStatus = {\n        iconName: IconName.circle,\n        iconClass: {\n          'kd-muted': true\n        },\n        iconTooltip: 'Unrecognized'\n      };\n    }\n\n    expand(index, resource) {\n      if (!this.hasErrors(resource)) {\n        return;\n      }\n\n      const rowKey = this.trackByResource(index, resource);\n\n      if (this.expandedRowKey === rowKey) {\n        this.expandedRowKey = undefined;\n        return;\n      }\n\n      this.expandedRowKey = rowKey;\n\n      if (this.cdr_) {\n        this.cdr_.markForCheck();\n      }\n    }\n\n    getStatus(resource) {\n      if (this.lastHash_) {\n        const stateBinding = this.bindings_[this.lastHash_];\n\n        if (stateBinding.callbackFunction(resource)) {\n          return this.getStatusObject_(stateBinding);\n        }\n      } // map() is needed here to cast hash from string to number. Without it compiler will not\n      // recognize stateBinding type.\n\n\n      for (const hash of Object.keys(this.bindings_).map(hash => Number(hash))) {\n        const stateBinding = this.bindings_[hash];\n\n        if (stateBinding.callbackFunction(resource)) {\n          this.lastHash_ = Number(hash);\n          return this.getStatusObject_(stateBinding);\n        }\n      }\n\n      return this.unknownStatus;\n    }\n\n    isRowExpanded(index, resource) {\n      return this.expandedRowKey === this.trackByResource(index, resource) && this.hasErrors(resource);\n    }\n\n    isRowHovered(index, resource) {\n      return this.hoveredRowKey === this.trackByResource(index, resource);\n    }\n\n    onRowOver(rowIdx, resource) {\n      this.hoveredRowKey = this.trackByResource(rowIdx, resource);\n    }\n\n    onRowLeave() {\n      this.hoveredRowKey = undefined;\n    }\n\n    showHoverIcon(index, resource) {\n      return this.isRowHovered(index, resource) && this.hasErrors(resource) && !this.isRowExpanded(index, resource);\n    }\n\n    getEvents(_resource) {\n      return [];\n    }\n\n    hasErrors(_resource) {\n      return false;\n    }\n\n    registerBinding(iconClass, callbackFunction, status = '') {\n      const icon = new Icon(IconName.circle, iconClass, status);\n      this.bindings_[icon.hash()] = {\n        icon,\n        callbackFunction\n      };\n    }\n\n    getStatusObject_(stateBinding) {\n      return {\n        iconName: stateBinding.icon.name,\n        iconClass: {\n          [stateBinding.icon.cssClass]: true\n        },\n        iconTooltip: stateBinding.icon.tooltip\n      };\n    }\n\n  }\n\n  ResourceListWithStatuses.ɵfac = function ResourceListWithStatuses_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  ResourceListWithStatuses.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ResourceListWithStatuses,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ResourceListWithStatuses;\n})();\nvar IconName = /*#__PURE__*/(() => {\n  (function (IconName) {\n    IconName[\"error\"] = \"error\";\n    IconName[\"circle\"] = \"fiber_manual_record\";\n    IconName[\"help\"] = \"help\";\n    IconName[\"warning\"] = \"warning\";\n    IconName[\"none\"] = \"\";\n  })(IconName || (IconName = {}));\n\n  return IconName;\n})();\n\nclass Icon {\n  constructor(name, cssClass, tooltip) {\n    this.name = name;\n    this.cssClass = cssClass;\n    this.tooltip = tooltip;\n  }\n  /**\n   * Implementation of djb2 hash function:\n   * http://www.cse.yorku.ca/~oz/hash.html\n   */\n\n\n  hash() {\n    const value = `${this.name}#${this.cssClass}#${this.tooltip}`;\n    return value.split('').map(str => {\n      return str.charCodeAt(0);\n    }).reduce((prev, curr) => {\n      return (prev << 5) + prev + curr;\n    }, 5381);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}