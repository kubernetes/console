{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { APP_INITIALIZER, Injector } from '@angular/core';\nimport { DecoderService } from '@common/services/global/decoder';\nimport { LocalConfigLoaderService } from '@common/services/global/loader';\nimport { ActionbarService } from './actionbar';\nimport { AssetsService } from './assets';\nimport { AuthService } from './authentication';\nimport { AuthorizerService } from './authorizer';\nimport { ConfigService } from './config';\nimport { CsrfTokenService } from './csrftoken';\nimport { GlobalSettingsService } from './globalsettings';\nimport { HistoryService } from './history';\nimport { AuthInterceptor } from './interceptor';\nimport { LocalSettingsService } from './localsettings';\nimport { LogService } from './logs';\nimport { NamespaceService } from './namespace';\nimport { PermissionsService } from './permissions';\nimport { NotificationsService } from './notifications';\nimport { ParamsService } from './params';\nimport { KdStateService } from './state';\nimport { ThemeService } from './theme';\nimport { TitleService } from './title';\nimport { OpaService } from './opa';\nimport { VerberService } from './verber';\nimport { PluginsConfigService } from './plugin';\nimport { PluginLoaderService } from '../pluginloader/pluginloader.service';\nimport { ClientPluginLoaderService } from '../pluginloader/clientloader.service';\nimport { PinnerService } from './pinner';\nimport * as i0 from \"@angular/core\";\nexport let GlobalServicesModule = /*#__PURE__*/(() => {\n  class GlobalServicesModule {\n    constructor(injector) {\n      GlobalServicesModule.injector = injector;\n    }\n\n  }\n\n  GlobalServicesModule.ɵfac = function GlobalServicesModule_Factory(t) {\n    return new (t || GlobalServicesModule)(i0.ɵɵinject(i0.Injector));\n  };\n\n  GlobalServicesModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: GlobalServicesModule\n  });\n  GlobalServicesModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [AuthorizerService, AssetsService, LocalSettingsService, GlobalSettingsService, ConfigService, PluginsConfigService, TitleService, OpaService, AuthService, CsrfTokenService, NotificationsService, ThemeService, KdStateService, NamespaceService, PermissionsService, ActionbarService, VerberService, PinnerService, HistoryService, LogService, ParamsService, LocalConfigLoaderService, DecoderService, {\n      provide: APP_INITIALIZER,\n      useFactory: init,\n      deps: [GlobalSettingsService, LocalSettingsService, ConfigService, OpaService, PermissionsService, HistoryService, PluginsConfigService, PinnerService, ThemeService, LocalConfigLoaderService],\n      multi: true\n    }, {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }, {\n      provide: PluginLoaderService,\n      useClass: ClientPluginLoaderService\n    }]\n  });\n  return GlobalServicesModule;\n})();\nexport function init(globalSettings, localSettings, pinner, config, opa, history, pluginsConfig, theme, loader) {\n  return () => {\n    return loader.init().then(() => {\n      localSettings.init();\n      pinner.init();\n      config.init();\n      opa.init();\n      history.init();\n      theme.init();\n      return globalSettings.init().then(() => pluginsConfig.init());\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}