{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ElementRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let AutofocusDirective = /*#__PURE__*/(() => {\n  class AutofocusDirective {\n    constructor(_el) {\n      this._el = _el;\n      this.unsubscribe_ = new Subject();\n    }\n\n    ngAfterViewInit() {\n      if (!this.opened) {\n        throw new Error('[opened] event binding is undefined');\n      }\n\n      this.opened.pipe(takeUntil(this.unsubscribe_)).subscribe(opened => opened ? setTimeout(() => this._el.nativeElement.focus()) : null);\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe_.next();\n      this.unsubscribe_.complete();\n    }\n\n  }\n\n  AutofocusDirective.ɵfac = function AutofocusDirective_Factory(t) {\n    return new (t || AutofocusDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  AutofocusDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AutofocusDirective,\n    selectors: [[\"\", \"kdAutofocus\", \"\"]],\n    inputs: {\n      opened: \"opened\"\n    }\n  });\n  return AutofocusDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}