{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { ERRORS } from '../../errors/errors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthorizerService = /*#__PURE__*/(() => {\n  class AuthorizerService {\n    constructor(http_) {\n      this.http_ = http_;\n      this.authorizationSubUrl_ = '/cani';\n    }\n\n    proxyGET(url) {\n      return this.http_.get(`${url}${this.authorizationSubUrl_}`).pipe(switchMap(response => {\n        if (!response.allowed) {\n          return throwError(ERRORS.forbidden);\n        }\n\n        return this.http_.get(url);\n      })).pipe(catchError(e => throwError(e)));\n    }\n\n  }\n\n  AuthorizerService.ɵfac = function AuthorizerService_Factory(t) {\n    return new (t || AuthorizerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthorizerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizerService,\n    factory: AuthorizerService.ɵfac\n  });\n  return AuthorizerService;\n})();","map":null,"metadata":{},"sourceType":"module"}