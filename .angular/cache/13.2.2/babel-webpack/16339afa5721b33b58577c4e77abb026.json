{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Helper, ResourceRatioModes } from '../../overview/helper';\nimport { ListGroupIdentifier, ListIdentifier } from '../components/resourcelist/groupids';\nimport { emptyResourcesRatio } from '../components/workloadstatus/component';\nexport class GroupedResourceList {\n  constructor() {\n    this.resourcesRatio = emptyResourcesRatio;\n    this.cumulativeMetrics = [];\n    this.items_ = {};\n    this.groupItems_ = {\n      [ListGroupIdentifier.cluster]: {},\n      [ListGroupIdentifier.workloads]: {},\n      [ListGroupIdentifier.discovery]: {},\n      [ListGroupIdentifier.config]: {}\n    };\n  }\n\n  shouldShowZeroState() {\n    let totalItems = 0;\n    const ids = Object.keys(this.items_);\n    ids.forEach(id => totalItems += this.items_[id]);\n    return totalItems === 0 && ids.length > 0;\n  }\n\n  isGroupVisible(groupId) {\n    let totalItems = 0;\n    const ids = Object.keys(this.groupItems_[groupId]);\n    ids.forEach(id => totalItems += this.groupItems_[groupId][id]);\n    return totalItems > 0;\n  }\n\n  onListUpdate(listEvent) {\n    this.items_[listEvent.id] = listEvent.items;\n    this.groupItems_[listEvent.groupId][listEvent.id] = listEvent.items;\n\n    if (listEvent.filtered) {\n      this.items_[listEvent.id] = 1;\n    }\n\n    this.updateResourcesRatio_(listEvent.id, listEvent.resourceList);\n  }\n\n  updateResourcesRatio_(identifier, list) {\n    switch (identifier) {\n      case ListIdentifier.cronJob:\n        {\n          const cronJobs = list;\n          this.resourcesRatio.cronJobRatio = Helper.getResourceRatio(cronJobs.status, cronJobs.listMeta.totalItems, ResourceRatioModes.Suspendable);\n          break;\n        }\n\n      case ListIdentifier.daemonSet:\n        {\n          const daemonSets = list;\n          this.resourcesRatio.daemonSetRatio = Helper.getResourceRatio(daemonSets.status, daemonSets.listMeta.totalItems);\n          break;\n        }\n\n      case ListIdentifier.deployment:\n        {\n          const deployments = list;\n          this.resourcesRatio.deploymentRatio = Helper.getResourceRatio(deployments.status, deployments.listMeta.totalItems);\n          break;\n        }\n\n      case ListIdentifier.job:\n        {\n          const jobs = list;\n          this.resourcesRatio.jobRatio = Helper.getResourceRatio(jobs.status, jobs.listMeta.totalItems, ResourceRatioModes.Completable);\n          break;\n        }\n\n      case ListIdentifier.pod:\n        {\n          const pods = list;\n          this.resourcesRatio.podRatio = Helper.getResourceRatio(pods.status, pods.listMeta.totalItems, ResourceRatioModes.Completable);\n          this.cumulativeMetrics = pods.cumulativeMetrics;\n          break;\n        }\n\n      case ListIdentifier.replicaSet:\n        {\n          const replicaSets = list;\n          this.resourcesRatio.replicaSetRatio = Helper.getResourceRatio(replicaSets.status, replicaSets.listMeta.totalItems);\n          break;\n        }\n\n      case ListIdentifier.replicationController:\n        {\n          const replicationControllers = list;\n          this.resourcesRatio.replicationControllerRatio = Helper.getResourceRatio(replicationControllers.status, replicationControllers.listMeta.totalItems);\n          break;\n        }\n\n      case ListIdentifier.statefulSet:\n        {\n          const statefulSets = list;\n          this.resourcesRatio.statefulSetRatio = Helper.getResourceRatio(statefulSets.status, statefulSets.listMeta.totalItems);\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}