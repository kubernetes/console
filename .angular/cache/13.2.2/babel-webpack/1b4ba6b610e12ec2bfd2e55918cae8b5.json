{"ast":null,"code":"import { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ConfigService } from './config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/icon\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"./config\";\nexport let AssetsService = /*#__PURE__*/(() => {\n  class AssetsService {\n    constructor(iconRegistry_, sanitizer_, config) {\n      this.iconRegistry_ = iconRegistry_;\n      this.sanitizer_ = sanitizer_;\n      this.config = config;\n      this.assetsPath_ = 'assets/images';\n      this.appLogoSvg_ = 'kubernetes-logo.svg';\n      this.appLogoTextSvg_ = 'kubernetes-logo-text.svg';\n      this.appLogoIcon_ = 'kd-logo';\n      this.appLogoTextIcon_ = 'kd-logo-text';\n\n      if (config.getCustomConfig()) {\n        this.appLogoSvg_ = config.getCustomConfig()['logo'];\n      }\n\n      if (!this.appLogoSvg_.includes('http')) {\n        iconRegistry_.addSvgIcon(this.appLogoIcon_, sanitizer_.bypassSecurityTrustResourceUrl(`${this.assetsPath_}/${this.appLogoSvg_}`));\n      } else {\n        this.iconRegistry_.addSvgIcon(this.appLogoIcon_, sanitizer_.bypassSecurityTrustResourceUrl(`${this.appLogoSvg_}`));\n      }\n\n      iconRegistry_.addSvgIcon(this.appLogoTextIcon_, sanitizer_.bypassSecurityTrustResourceUrl(`${this.assetsPath_}/${this.appLogoTextSvg_}`));\n      iconRegistry_.addSvgIcon('pin', sanitizer_.bypassSecurityTrustResourceUrl(`${this.assetsPath_}/pin.svg`));\n      iconRegistry_.addSvgIcon('pin-crossed', sanitizer_.bypassSecurityTrustResourceUrl(`${this.assetsPath_}/pin-crossed.svg`));\n    }\n\n    getAppLogo() {\n      return this.appLogoIcon_;\n    }\n\n    getAppLogoText() {\n      return this.appLogoTextIcon_;\n    }\n\n  }\n\n  AssetsService.ɵfac = function AssetsService_Factory(t) {\n    return new (t || AssetsService)(i0.ɵɵinject(MatIconRegistry), i0.ɵɵinject(DomSanitizer), i0.ɵɵinject(ConfigService));\n  };\n\n  AssetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssetsService,\n    factory: AssetsService.ɵfac\n  });\n  return AssetsService;\n})();","map":null,"metadata":{},"sourceType":"module"}