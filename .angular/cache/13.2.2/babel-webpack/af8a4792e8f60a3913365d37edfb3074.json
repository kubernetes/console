{"ast":null,"code":"import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { combineLatest, Subject } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ParamsService = /*#__PURE__*/(() => {\n  class ParamsService {\n    constructor(router_, route_) {\n      this.router_ = router_;\n      this.route_ = route_;\n      this.onParamChange = new Subject();\n      this.params_ = {};\n      this.queryParamMap_ = {};\n      this.router_.events.pipe(filter(event => event instanceof NavigationEnd)).pipe(map(() => {\n        let active = this.route_;\n\n        while (active.firstChild) {\n          active = active.firstChild;\n        }\n\n        return active;\n      })).pipe(switchMap(active => combineLatest([active.params, active.queryParams]))).subscribe(([params, queryParams]) => {\n        this.copyParams_(params, this.params_);\n        this.copyParams_(queryParams, this.queryParamMap_);\n        this.onParamChange.next();\n      });\n    }\n\n    getRouteParam(name) {\n      return this.params_ ? this.params_[name] : undefined;\n    }\n\n    getQueryParam(name) {\n      return this.queryParamMap_ ? this.queryParamMap_[name] : undefined;\n    }\n\n    setQueryParam(name, value) {\n      if (this.queryParamMap_) this.queryParamMap_[name] = value;\n    }\n\n    copyParams_(from, to) {\n      for (const key of Object.keys(from)) {\n        to[key] = from[key];\n      }\n    }\n\n  }\n\n  ParamsService.ɵfac = function ParamsService_Factory(t) {\n    return new (t || ParamsService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n  };\n\n  ParamsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ParamsService,\n    factory: ParamsService.ɵfac\n  });\n  return ParamsService;\n})();","map":null,"metadata":{},"sourceType":"module"}