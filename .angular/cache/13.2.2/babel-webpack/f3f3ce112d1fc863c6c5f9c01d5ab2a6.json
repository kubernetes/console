{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Injector } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, pairwise } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let HistoryService = /*#__PURE__*/(() => {\n  class HistoryService {\n    constructor(injector_) {\n      this.injector_ = injector_;\n    }\n    /** Initializes the service. Must be called before use. */\n\n\n    init() {\n      this.router_ = this.injector_.get(Router);\n      this.router_.events.pipe(filter(e => e instanceof NavigationEnd)).pipe(pairwise()).subscribe(e => {\n        if (e[0].url !== e[1].url) {\n          this.previousStateUrl_ = e[0].url;\n          this.currentStateUrl_ = e[1].url;\n        }\n      });\n    }\n\n    pushState(navigation) {\n      this.previousStateUrl_ = navigation.extractedUrl.toString();\n      this.currentStateUrl_ = navigation.initialUrl.toString();\n    }\n    /**\n     * Goes back to previous state or to the provided defaultState if none set.\n     */\n\n\n    goToPreviousState(defaultState) {\n      if (this.previousStateUrl_ && this.previousStateUrl_ !== this.currentStateUrl_) {\n        return this.router_.navigateByUrl(this.previousStateUrl_);\n      }\n\n      return this.router_.navigate([defaultState], {\n        queryParamsHandling: 'preserve'\n      });\n    }\n\n  }\n\n  HistoryService.ɵfac = function HistoryService_Factory(t) {\n    return new (t || HistoryService)(i0.ɵɵinject(i0.Injector));\n  };\n\n  HistoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HistoryService,\n    factory: HistoryService.ɵfac\n  });\n  return HistoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}