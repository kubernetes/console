{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport var ApiError = /*#__PURE__*/(() => {\n  (function (ApiError) {\n    ApiError[\"tokenExpired\"] = \"MSG_TOKEN_EXPIRED_ERROR\";\n    ApiError[\"encryptionKeyChanged\"] = \"MSG_ENCRYPTION_KEY_CHANGED\";\n  })(ApiError || (ApiError = {}));\n\n  return ApiError;\n})();\nexport var ErrorStatus = /*#__PURE__*/(() => {\n  (function (ErrorStatus) {\n    ErrorStatus[\"unauthorized\"] = \"Unauthorized\";\n    ErrorStatus[\"forbidden\"] = \"Forbidden\";\n    ErrorStatus[\"internal\"] = \"Internal error\";\n    ErrorStatus[\"unknown\"] = \"Unknown error\";\n    ErrorStatus[\"badRequest\"] = \"Bad Request\";\n    ErrorStatus[\"notFound\"] = \"Not Found\";\n  })(ErrorStatus || (ErrorStatus = {}));\n\n  return ErrorStatus;\n})();\nexport var ErrorCode = /*#__PURE__*/(() => {\n  (function (ErrorCode) {\n    ErrorCode[ErrorCode[\"unauthorized\"] = 401] = \"unauthorized\";\n    ErrorCode[ErrorCode[\"forbidden\"] = 403] = \"forbidden\";\n    ErrorCode[ErrorCode[\"internal\"] = 500] = \"internal\";\n    ErrorCode[ErrorCode[\"badRequest\"] = 400] = \"badRequest\";\n    ErrorCode[ErrorCode[\"notFound\"] = 404] = \"notFound\";\n  })(ErrorCode || (ErrorCode = {}));\n\n  return ErrorCode;\n})();\nconst localizedErrors = {\n  MSG_TOKEN_EXPIRED_ERROR: 'You have been logged out because your token has expired.',\n  MSG_ENCRYPTION_KEY_CHANGED: 'You have been logged out because your token is invalid.',\n  MSG_ACCESS_DENIED: 'Access denied.',\n  MSG_DASHBOARD_EXCLUSIVE_RESOURCE_ERROR: 'Trying to access/modify dashboard exclusive resource.',\n  MSG_LOGIN_UNAUTHORIZED_ERROR: 'Invalid credentials provided',\n  MSG_DEPLOY_NAMESPACE_MISMATCH_ERROR: 'Cannot deploy to the namespace different than the currently selected one.',\n  MSG_DEPLOY_EMPTY_NAMESPACE_ERROR: 'Cannot deploy the content as the target namespace is not specified.'\n};\n/**\n * Error returned as a part of backend api calls. All server errors should be in this format.\n */\n\nexport class K8SError {\n  constructor(error) {\n    this.ErrStatus = error;\n  }\n\n  toKdError() {\n    return new KdError(this.ErrStatus.reason, this.ErrStatus.code, this.ErrStatus.message);\n  }\n\n}\n/**\n * Frontend specific errors or errors transformed based on server response.\n */\n\nexport class KdError {\n  constructor(status, code, message) {\n    this.status = status;\n    this.code = code;\n    this.message = message;\n  }\n\n  static isError(error, ...apiErrors) {\n    // API errors will set 'error' as a string.\n    if (typeof error.error === 'object') {\n      return false;\n    }\n\n    for (const apiErr of apiErrors) {\n      if (apiErr === error.error.trim()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  localize() {\n    const result = this;\n    const localizedErr = localizedErrors[this.message.trim()];\n\n    if (localizedErr) {\n      this.message = localizedErr;\n    }\n\n    return result;\n  }\n\n}\nexport function AsKdError(error) {\n  const result = {};\n  let status;\n  result.message = error.message;\n  result.code = error.status;\n\n  if (typeof error.error !== 'object') {\n    result.message = error.error;\n  }\n\n  switch (error.status) {\n    case ErrorCode.unauthorized:\n      status = ErrorStatus.unauthorized;\n      break;\n\n    case ErrorCode.forbidden:\n      status = ErrorStatus.forbidden;\n      break;\n\n    case ErrorCode.internal:\n      status = ErrorStatus.internal;\n      break;\n\n    case ErrorCode.notFound:\n      status = ErrorStatus.notFound;\n      break;\n\n    default:\n      status = ErrorStatus.unknown;\n  }\n\n  result.status = status;\n  return new KdError(result.status, result.code, result.message).localize();\n}\nexport const ERRORS = {\n  forbidden: new KdError(ErrorStatus.forbidden, ErrorCode.forbidden, localizedErrors.MSG_ACCESS_DENIED)\n};","map":null,"metadata":{},"sourceType":"module"}