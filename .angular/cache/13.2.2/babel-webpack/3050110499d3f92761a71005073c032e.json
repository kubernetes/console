{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { DecimalPipe } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n/**\n * Formats memory in bytes to a binary prefix format, e.g., 789,21 MiB.\n */\n\nexport let MemoryFormatter = /*#__PURE__*/(() => {\n  class MemoryFormatter {\n    constructor(decimalPipe_) {\n      this.decimalPipe_ = decimalPipe_;\n      this.base = 1024;\n      this.powerSuffixes = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi'];\n    }\n\n    transform(value) {\n      let divider = 1;\n      let power = 0;\n\n      while (value / divider > this.base && power < this.powerSuffixes.length - 1) {\n        divider *= this.base;\n        power += 1;\n      }\n\n      const formatted = this.decimalPipe_.transform(value / divider, '1.2-2');\n      const suffix = this.powerSuffixes[power];\n      return suffix ? `${formatted}${suffix}` : formatted;\n    }\n\n  }\n\n  MemoryFormatter.ɵfac = function MemoryFormatter_Factory(t) {\n    return new (t || MemoryFormatter)(i0.ɵɵdirectiveInject(i1.DecimalPipe, 16));\n  };\n\n  MemoryFormatter.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"kdMemory\",\n    type: MemoryFormatter,\n    pure: true\n  });\n  return MemoryFormatter;\n})();","map":null,"metadata":{},"sourceType":"module"}