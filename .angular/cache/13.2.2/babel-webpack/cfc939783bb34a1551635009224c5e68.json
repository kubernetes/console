{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ElementRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSelect } from '@angular/material/select';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, startWith, switchMap, takeUntil, first } from 'rxjs/operators';\nimport { CONFIG_DI_TOKEN } from '../../../index.config';\nimport { NAMESPACE_STATE_PARAM } from '../../params/params';\nimport { GlobalSettingsService } from '../../services/global/globalsettings';\nimport { HistoryService } from '../../services/global/history';\nimport { NamespaceService } from '../../services/global/namespace';\nimport { NotificationsService } from '../../services/global/notifications';\nimport { KdStateService } from '../../services/global/state';\nimport { EndpointManager, Resource } from '../../services/resource/endpoint';\nimport { ResourceService } from '../../services/resource/resource';\nimport { NamespaceChangeDialog } from './changedialog/dialog';\nimport { PermissionsService } from 'common/services/global/permissions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/global/namespace\";\nimport * as i3 from \"../../services/resource/resource\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"../../services/global/state\";\nimport * as i6 from \"common/services/global/permissions\";\nimport * as i7 from \"../../services/global/notifications\";\nimport * as i8 from \"../../services/global/history\";\nimport * as i9 from \"../../services/global/globalsettings\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/forms\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/flex-layout/extended\";\nimport * as i15 from \"@angular/material/core\";\nconst _c0 = [\"namespaceInput\"];\n\nfunction NamespaceSelectorComponent_mat_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵi18n(1, 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", ctx_r1.allNamespacesKey);\n  }\n}\n\nfunction NamespaceSelectorComponent_mat_optgroup_6_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const namespace_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", namespace_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", namespace_r4, \" \");\n  }\n}\n\nfunction NamespaceSelectorComponent_mat_optgroup_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 10);\n    i0.ɵɵtemplate(1, NamespaceSelectorComponent_mat_optgroup_6_mat_option_1_Template, 2, 2, \"mat-option\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.namespaces);\n  }\n}\n\nconst _c7 = function (a0) {\n  return {\n    \"kd-namespace-select-input-border\": a0\n  };\n};\n\nexport let NamespaceSelectorComponent = /*#__PURE__*/(() => {\n  class NamespaceSelectorComponent {\n    constructor(router_, namespaceService_, namespace_, roleBinding_, ing_, podList_, dialog_, kdState_, permission, notifications_, activatedRoute_, historyService_, settingsService_, appConfig_) {\n      this.router_ = router_;\n      this.namespaceService_ = namespaceService_;\n      this.namespace_ = namespace_;\n      this.roleBinding_ = roleBinding_;\n      this.ing_ = ing_;\n      this.podList_ = podList_;\n      this.dialog_ = dialog_;\n      this.kdState_ = kdState_;\n      this.permission = permission;\n      this.notifications_ = notifications_;\n      this.activatedRoute_ = activatedRoute_;\n      this.historyService_ = historyService_;\n      this.settingsService_ = settingsService_;\n      this.appConfig_ = appConfig_;\n      this.namespaceUpdate_ = new Subject();\n      this.roleBindingUpdate_ = new Subject();\n      this.ingressRouteUpdate_ = new Subject();\n      this.unsubscribe_ = new Subject();\n      this.endpoint_ = EndpointManager.resource(Resource.namespace);\n      this.endpointRole_ = EndpointManager.resource(Resource.roleBinding);\n      this.endpointcrd_ = EndpointManager.resource(Resource.crd, true);\n      this.namespaces = [];\n      this.selectNamespaceInput = '';\n      this.usingFallbackNamespaces = false;\n    }\n\n    ngOnInit() {\n      this.activatedRoute_.queryParams.pipe(takeUntil(this.unsubscribe_)).subscribe(params => {\n        const namespace = params.namespace;\n\n        if (!namespace) {\n          this.setDefaultQueryParams_();\n          return;\n        }\n\n        if (this.namespaceService_.current() === namespace) {\n          return;\n        }\n\n        this.namespaceService_.setCurrent(namespace);\n        this.namespaceService_.onNamespaceChangeEvent.emit(namespace);\n        this.selectedNamespace = namespace;\n      });\n      this.resourceNamespaceParam = this._getCurrentResourceNamespaceParam();\n      this.router_.events.pipe(filter(event => event instanceof NavigationEnd), distinctUntilChanged()).subscribe(() => {\n        this.resourceNamespaceParam = this._getCurrentResourceNamespaceParam();\n\n        if (this.shouldShowNamespaceChangeDialog(this.namespaceService_.current())) {\n          this.handleNamespaceChangeDialog_();\n        }\n      });\n      this.allNamespacesKey = this.namespaceService_.getAllNamespacesKey();\n      this.selectedNamespace = this.namespaceService_.current();\n      this.select_.value = this.selectedNamespace;\n      this.loadNamespaces_(); //this.loadRoleBindings_();\n      //this.loadRoleIngressroutes_();\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe_.next();\n      this.unsubscribe_.complete();\n    }\n\n    selectNamespace() {\n      if (this.selectNamespaceInput.length === 0) {\n        return;\n      }\n\n      this.selectedNamespace = this.selectNamespaceInput;\n      this.select_.close();\n      this.changeNamespace_(this.selectedNamespace);\n    }\n\n    onNamespaceToggle(opened) {\n      if (opened) {\n        this.namespaceUpdate_.next();\n        this.focusNamespaceInput_();\n        return;\n      }\n\n      this.changeNamespace_(this.selectedNamespace);\n    }\n\n    formatNamespaceName(namespace) {\n      if (this.namespaceService_.isMultiNamespace(namespace)) {\n        return 'All namespaces';\n      }\n\n      return namespace;\n    } // setDefaultQueryParams_() {\n    //   const defaultNamespace = this.settingsService_.getDefaultNamespace() || this.appConfig_.defaultNamespace;\n    //   this.router_.navigate([this.activatedRoute_.snapshot.url], {\n    //     queryParams: {[NAMESPACE_STATE_PARAM]: defaultNamespace},\n    //     queryParamsHandling: 'merge',\n    //   });\n    // }\n\n    /**\n     * When state is loaded and namespaces are fetched perform basic validation.\n     */\n\n\n    onNamespaceLoaded_() {\n      let newNamespace = this.namespaceService_.getDefaultNamespace();\n      const targetNamespace = this.selectedNamespace;\n\n      if (targetNamespace && (this.namespaces.indexOf(targetNamespace) >= 0 || targetNamespace === this.allNamespacesKey || this.namespaceService_.isNamespaceValid(targetNamespace))) {\n        newNamespace = targetNamespace;\n      }\n\n      if (newNamespace !== this.selectedNamespace) {\n        this.changeNamespace_(newNamespace);\n      }\n    }\n\n    loadNamespaces_() {\n      this.namespaceUpdate_.pipe(startWith({})).pipe(switchMap(() => this.namespace_.get(this.endpoint_.list()))).pipe(takeUntil(this.unsubscribe_)).subscribe(namespaceList => {\n        this.usingFallbackNamespaces = false;\n        this.namespaces = namespaceList.namespaces.map(n => n.objectMeta.name);\n\n        if (!this.namespaces || this.namespaces.length === 0) {\n          this.usingFallbackNamespaces = true;\n          this.namespaces = this.settingsService_.getNamespaceFallbackList();\n        }\n\n        this.namespaces = this.namespaces.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n        if (namespaceList.errors.length > 0) {\n          for (const err of namespaceList.errors) {\n            this.notifications_.pushErrors([err]);\n          }\n        }\n\n        for (const namespace of namespacesTemp) {\n          if (this.namespaces.indexOf(namespace) === -1) {\n            this.checkNamespaces_(namespace);\n          }\n        }\n      }, () => {}, () => {\n        this.onNamespaceLoaded_();\n      });\n    }\n\n    loadRoleIngressroutes_(namespace) {\n      this.ingressRouteUpdate_.pipe(takeUntil(this.unsubscribe_)).pipe(startWith({})).pipe(switchMap(() => this.ing_.get('api/v1/crd/' + namespace + '/ingressroutes.traefik.containo.us/traefik/ingressroutes'))).pipe(first()).subscribe(inglist => {\n        if (inglist.errors.length > 0) {\n          for (const err of inglist.errors) {\n            this.notifications_.pushErrors([err]);\n            console.log([err]);\n          }\n        }\n      }, () => {}, () => {});\n    }\n\n    loadRoleBindings_() {\n      this.roleBindingUpdate_.pipe(takeUntil(this.unsubscribe_)).pipe(startWith({})).pipe(switchMap(() => this.roleBinding_.get(this.endpointRole_.list()))).subscribe(roleBindingList => {\n        if (roleBindingList.errors.length > 0) {\n          for (const err of roleBindingList.errors) {\n            this.notifications_.pushErrors([err]); //console.log([err]);\n          }\n        }\n      }, () => {}, () => {});\n    }\n\n    checkNamespaces_(namespaceName) {\n      this.podList_.get('api/v1/pod/' + namespaceName).pipe(first()).subscribe(podList => {\n        if (this.namespaces.indexOf(namespaceName) === -1) {\n          if (podList.errors.length === 0) {\n            //console.log(namespaceName + ' is allowed. Adding');\n            this.namespaces.push(namespaceName);\n          } else {\n            const index = this.namespaces.indexOf(namespaceName, 0);\n\n            if (index > -1) {\n              //console.log(namespaceName + ' is forbidden. Deleting');\n              this.namespaces.splice(index, 1);\n            }\n          }\n        }\n      }, () => {}, () => {});\n    }\n\n    handleNamespaceChangeDialog_() {\n      this.dialog_.open(NamespaceChangeDialog, {\n        data: {\n          namespace: this.selectedNamespace,\n          newNamespace: this._getCurrentResourceNamespaceParam()\n        }\n      }).afterClosed().subscribe(confirmed => {\n        if (confirmed) {\n          this.selectedNamespace = this._getCurrentResourceNamespaceParam();\n          this.router_.navigate([], {\n            relativeTo: this.activatedRoute_,\n            queryParams: {\n              [NAMESPACE_STATE_PARAM]: this.selectedNamespace\n            },\n            queryParamsHandling: 'merge'\n          });\n          return;\n        }\n\n        this.historyService_.goToPreviousState('overview');\n      });\n    }\n\n    changeNamespace_(namespace) {\n      this.clearNamespaceInput_();\n\n      if (this.resourceNamespaceParam) {\n        // Go to overview of the new namespace as change was done from details view.\n        this.router_.navigate(['overview'], {\n          queryParams: {\n            [NAMESPACE_STATE_PARAM]: namespace\n          },\n          queryParamsHandling: 'merge'\n        });\n        return;\n      } // Change only the namespace as currently not on details view.\n\n\n      this.router_.navigate([], {\n        relativeTo: this.activatedRoute_,\n        queryParams: {\n          [NAMESPACE_STATE_PARAM]: namespace\n        },\n        queryParamsHandling: 'merge'\n      });\n    }\n\n    clearNamespaceInput_() {\n      this.selectNamespaceInput = '';\n    }\n\n    shouldShowNamespaceChangeDialog(targetNamespace) {\n      return targetNamespace !== this.allNamespacesKey && !!this.resourceNamespaceParam && this.resourceNamespaceParam !== targetNamespace;\n    }\n\n    _getCurrentResourceNamespaceParam() {\n      return this._getCurrentRoute().snapshot.params.resourceNamespace;\n    }\n\n    _getCurrentRoute() {\n      let route = this.activatedRoute_.root;\n\n      while (route && route.firstChild) {\n        route = route.firstChild;\n      }\n\n      return route;\n    }\n    /**\n     * Focuses namespace input field after clicking on namespace selector menu.\n     */\n\n\n    focusNamespaceInput_() {\n      // Wrap in a timeout to make sure that element is rendered before looking for it.\n      setTimeout(() => {\n        this.namespaceInputEl_.nativeElement.focus();\n      }, 150);\n    }\n\n    setDefaultQueryParams_() {\n      this.permission.redirectToNs(this.router_);\n    }\n\n  }\n\n  NamespaceSelectorComponent.ɵfac = function NamespaceSelectorComponent_Factory(t) {\n    return new (t || NamespaceSelectorComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.NamespaceService), i0.ɵɵdirectiveInject(i3.ResourceService), i0.ɵɵdirectiveInject(i3.ResourceService), i0.ɵɵdirectiveInject(i3.ResourceService), i0.ɵɵdirectiveInject(i3.ResourceService), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.KdStateService), i0.ɵɵdirectiveInject(i6.PermissionsService), i0.ɵɵdirectiveInject(i7.NotificationsService), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i8.HistoryService), i0.ɵɵdirectiveInject(i9.GlobalSettingsService), i0.ɵɵdirectiveInject(CONFIG_DI_TOKEN));\n  };\n\n  NamespaceSelectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NamespaceSelectorComponent,\n    selectors: [[\"kd-namespace-selector\"]],\n    viewQuery: function NamespaceSelectorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatSelect, 7);\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.select_ = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.namespaceInputEl_ = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 9,\n    consts: function () {\n      let i18n_1;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        const MSG_EXTERNAL_5799011743297017810$$SRC_APP_FRONTEND_COMMON_COMPONENTS_NAMESPACE_COMPONENT_TS_2 = goog.getMsg(\"Select namespace...\");\n        i18n_1 = MSG_EXTERNAL_5799011743297017810$$SRC_APP_FRONTEND_COMMON_COMPONENTS_NAMESPACE_COMPONENT_TS_2;\n      } else {\n        i18n_1 = $localize`Select namespace...`;\n      }\n\n      let i18n_3;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        const MSG_EXTERNAL_7571663901157580742$$SRC_APP_FRONTEND_COMMON_COMPONENTS_NAMESPACE_COMPONENT_TS_4 = goog.getMsg(\"NAMESPACES\");\n        i18n_3 = MSG_EXTERNAL_7571663901157580742$$SRC_APP_FRONTEND_COMMON_COMPONENTS_NAMESPACE_COMPONENT_TS_4;\n      } else {\n        i18n_3 = $localize`NAMESPACES`;\n      }\n\n      let i18n_5;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        const MSG_EXTERNAL_2671324669903200051$$SRC_APP_FRONTEND_COMMON_COMPONENTS_NAMESPACE_COMPONENT_TS__6 = goog.getMsg(\"All namespaces\");\n        i18n_5 = MSG_EXTERNAL_2671324669903200051$$SRC_APP_FRONTEND_COMMON_COMPONENTS_NAMESPACE_COMPONENT_TS__6;\n      } else {\n        i18n_5 = $localize`All namespaces`;\n      }\n\n      return [[1, \"kd-namespace-select-input-container\"], [1, \"kd-namespace-select\", 3, \"ngModel\", \"openedChange\", \"ngModelChange\"], [3, \"ngClass\"], [\"placeholder\", i18n_1, \"name\", \"selectNamespaceInput\", \"autocomplete\", \"off\", 1, \"kd-namespace-select-input\", 3, \"ngModel\", \"ngModelChange\", \"keydown\"], [\"namespaceInput\", \"\"], [3, \"value\", 4, \"ngIf\"], [\"label\", i18n_3, 4, \"ngIf\"], [1, \"kd-hidden\", 3, \"value\"], [3, \"value\"], i18n_5, [\"label\", i18n_3], [3, \"value\", 4, \"ngFor\", \"ngForOf\"]];\n    },\n    template: function NamespaceSelectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        i0.ɵɵelementStart(1, \"mat-select\", 1);\n        i0.ɵɵlistener(\"openedChange\", function NamespaceSelectorComponent_Template_mat_select_openedChange_1_listener($event) {\n          return ctx.onNamespaceToggle($event);\n        })(\"ngModelChange\", function NamespaceSelectorComponent_Template_mat_select_ngModelChange_1_listener($event) {\n          return ctx.selectedNamespace = $event;\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"input\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function NamespaceSelectorComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.selectNamespaceInput = $event;\n        })(\"keydown\", function NamespaceSelectorComponent_Template_input_keydown_3_listener($event) {\n          return $event.code === \"Enter\" ? ctx.selectNamespace() : null;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, NamespaceSelectorComponent_mat_option_5_Template, 2, 1, \"mat-option\", 5);\n        i0.ɵɵtemplate(6, NamespaceSelectorComponent_mat_optgroup_6_Template, 2, 1, \"mat-optgroup\", 6);\n        i0.ɵɵelementStart(7, \"mat-option\", 7);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedNamespace);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c7, ctx.namespaces.length > 0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectNamespaceInput);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.namespaces.length && !ctx.usingFallbackNamespaces);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.namespaces.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.selectedNamespace);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.formatNamespaceName(ctx.selectedNamespace));\n      }\n    },\n    directives: [i10.MatFormField, i11.MatSelect, i12.NgControlStatus, i12.NgModel, i13.NgClass, i14.DefaultClassDirective, i12.DefaultValueAccessor, i13.NgIf, i15.MatOption, i15.MatOptgroup, i13.NgForOf],\n    styles: [\"[_nghost-%COMP%]{border-radius:2px;height:38px;line-height:36px;margin-right:16px;padding-right:28px}[_nghost-%COMP%]     .mat-form-field-infix{border:0;padding:0;width:144px}[_nghost-%COMP%]     .mat-form-field-wrapper{padding:0}[_nghost-%COMP%]     .kd-namespace-select{font-family:roboto,Helvetica Neue,sans-serif;font-size:16px;line-height:36px;margin-left:16px}.kd-namespace-select-input[_ngcontent-%COMP%]{border:0;height:24px;outline:none;padding:16px 0 16px 16px}\"]\n  });\n  return NamespaceSelectorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}