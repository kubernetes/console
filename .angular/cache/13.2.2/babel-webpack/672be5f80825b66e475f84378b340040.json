{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport { CONFIG_DI_TOKEN } from '../../../index.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(cookies_, appConfig_) {\n      this.cookies_ = cookies_;\n      this.appConfig_ = appConfig_;\n    }\n\n    intercept(req, next) {\n      const authCookie = this.cookies_.get(this.appConfig_.authTokenCookieName); // Filter requests made to our backend starting with 'api/v1' and append request header\n      // with token stored in a cookie.\n\n      if (req.url.startsWith('api/v1') && authCookie.length) {\n        const authReq = req.clone({\n          headers: req.headers.set(this.appConfig_.authTokenHeaderName, authCookie)\n        });\n        return next.handle(authReq);\n      }\n\n      return next.handle(req);\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(CONFIG_DI_TOKEN));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}