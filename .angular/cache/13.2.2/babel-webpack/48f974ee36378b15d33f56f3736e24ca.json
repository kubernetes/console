{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { AuthGuard } from '@common/services/guard/auth';\nimport { ChromeComponent } from './component';\nimport { RedirectGuard } from './redirectGuard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\"; //import {ExtPageComponent} from './externalPage/component'\n\nconst routes = [{\n  path: '',\n  redirectTo: '/workloads',\n  pathMatch: 'full'\n}, {\n  path: '',\n  component: ChromeComponent,\n  canActivate: [AuthGuard],\n  children: [{\n    path: 'error',\n    loadChildren: () => import('error/module').then(m => m.ErrorModule)\n  }, // Cluster group\n  {\n    path: 'cluster',\n    loadChildren: () => import('resource/cluster/module').then(m => m.ClusterModule)\n  }, {\n    path: 'clusterrolebinding',\n    loadChildren: () => import('resource/cluster/clusterrolebinding/module').then(m => m.ClusterRoleBindingModule)\n  }, {\n    path: 'clusterrole',\n    loadChildren: () => import('resource/cluster/clusterrole/module').then(m => m.ClusterRoleModule)\n  }, {\n    path: 'event',\n    loadChildren: () => import('resource/cluster/event/module').then(m => m.EventModule)\n  }, {\n    path: 'namespace',\n    loadChildren: () => import('resource/cluster/namespace/module').then(m => m.NamespaceModule)\n  }, {\n    path: 'networkpolicy',\n    loadChildren: () => import('resource/cluster/networkpolicy/module').then(m => m.NetworkPolicyModule)\n  }, {\n    path: 'node',\n    loadChildren: () => import('resource/cluster/node/module').then(m => m.NodeModule)\n  }, {\n    path: 'persistentvolume',\n    loadChildren: () => import('resource/cluster/persistentvolume/module').then(m => m.PersistentVolumeModule)\n  }, {\n    path: 'serviceaccount',\n    loadChildren: () => import('resource/cluster/serviceaccount/module').then(m => m.ServiceAccountModule)\n  }, {\n    path: 'role',\n    loadChildren: () => import('resource/cluster/role/module').then(m => m.RoleModule)\n  }, {\n    path: 'rolebinding',\n    loadChildren: () => import('resource/cluster/rolebinding/module').then(m => m.RoleBingingModule)\n  }, // Overview\n  {\n    path: 'overview',\n    loadChildren: () => import('overview/module').then(m => m.OverviewModule)\n  }, // Workloads group\n  {\n    path: 'workloads',\n    loadChildren: () => import('resource/workloads/module').then(m => m.WorkloadsModule)\n  }, {\n    path: 'cronjob',\n    loadChildren: () => import('resource/workloads/cronjob/module').then(m => m.CronJobModule)\n  }, {\n    path: 'daemonset',\n    loadChildren: () => import('resource/workloads/daemonset/module').then(m => m.DaemonSetModule)\n  }, {\n    path: 'deployment',\n    loadChildren: () => import('resource/workloads/deployment/module').then(m => m.DeploymentModule)\n  }, {\n    path: 'job',\n    loadChildren: () => import('resource/workloads/job/module').then(m => m.JobModule)\n  }, {\n    path: 'pod',\n    loadChildren: () => import('resource/workloads/pod/module').then(m => m.PodModule)\n  }, {\n    path: 'replicaset',\n    loadChildren: () => import('resource/workloads/replicaset/module').then(m => m.ReplicaSetModule)\n  }, {\n    path: 'replicationcontroller',\n    loadChildren: () => import('resource/workloads/replicationcontroller/module').then(m => m.ReplicationControllerModule)\n  }, {\n    path: 'statefulset',\n    loadChildren: () => import('resource/workloads/statefulset/module').then(m => m.StatefulSetModule)\n  }, // Discovery and load balancing group\n  {\n    path: 'discovery',\n    loadChildren: () => import('resource/discovery/module').then(m => m.DiscoveryModule)\n  }, {\n    path: 'ingress',\n    loadChildren: () => import('resource/discovery/ingress/module').then(m => m.IngressModule)\n  }, {\n    path: 'ingressroutes',\n    loadChildren: () => import('resource/discovery/ingressroute/module').then(m => m.IngressRouteModule)\n  }, {\n    path: 'ingressroutetcps',\n    loadChildren: () => import('resource/discovery/ingressroute/module').then(m => m.IngressRouteModule)\n  }, {\n    path: 'service',\n    loadChildren: () => import('resource/discovery/service/module').then(m => m.ServiceModule)\n  }, {\n    path: 'plugin',\n    loadChildren: () => import('plugin/module').then(m => m.PluginModule)\n  }, // Config group\n  {\n    path: 'config',\n    loadChildren: () => import('resource/config/module').then(m => m.ConfigModule)\n  }, {\n    path: 'configmap',\n    loadChildren: () => import('resource/config/configmap/module').then(m => m.ConfigMapModule)\n  }, {\n    path: 'opa',\n    loadChildren: () => import('resource/config/configmapopa/module').then(m => m.ConfigMapOpaModule)\n  }, {\n    path: 'persistentvolumeclaim',\n    loadChildren: () => import('resource/config/persistentvolumeclaim/module').then(m => m.PersistentVolumeClaimModule)\n  }, {\n    path: 'secret',\n    loadChildren: () => import('resource/config/secret/module').then(m => m.SecretModule)\n  }, {\n    path: 'storageclass',\n    loadChildren: () => import('resource/config/storageclass/module').then(m => m.StorageClassModule)\n  }, // Custom resource definitions\n  {\n    path: 'customresourcedefinition',\n    loadChildren: () => import('crd/module').then(m => m.CrdModule)\n  }, // Others\n  {\n    path: 'settings',\n    loadChildren: () => import('settings/module').then(m => m.SettingsModule)\n  }, {\n    path: 'about',\n    loadChildren: () => import('about/module').then(m => m.AboutModule)\n  }, {\n    path: 'create',\n    loadChildren: () => import('create/module').then(m => m.CreateModule)\n  }, {\n    path: 'log',\n    loadChildren: () => import('logs/module').then(m => m.LogsModule)\n  }, {\n    path: 'shell',\n    loadChildren: () => import('shell/module').then(m => m.ShellModule)\n  }, {\n    path: 'search',\n    loadChildren: () => import('search/module').then(m => m.SearchModule),\n    runGuardsAndResolvers: 'always'\n  }, {\n    path: 'custom',\n    canActivate: [RedirectGuard],\n    component: RedirectGuard\n  }, {\n    path: 'externalPage',\n    loadChildren: () => import('./externalPage/module').then(m => m.ExtPageModule),\n    runGuardsAndResolvers: 'always'\n  }]\n}];\nexport let ChromeRoutingModule = /*#__PURE__*/(() => {\n  class ChromeRoutingModule {}\n\n  ChromeRoutingModule.ɵfac = function ChromeRoutingModule_Factory(t) {\n    return new (t || ChromeRoutingModule)();\n  };\n\n  ChromeRoutingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: ChromeRoutingModule\n  });\n  ChromeRoutingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[RouterModule.forChild(routes), RouterModule.forRoot(routes, {\n      onSameUrlNavigation: 'reload'\n    })], RouterModule]\n  });\n  return ChromeRoutingModule;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ChromeRoutingModule, {\n    imports: [i1.RouterModule, i1.RouterModule],\n    exports: [RouterModule]\n  });\n})();","map":null,"metadata":{},"sourceType":"module"}