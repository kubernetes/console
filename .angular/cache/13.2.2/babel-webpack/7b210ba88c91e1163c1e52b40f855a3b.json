{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { NgModuleFactory } from '@angular/core';\nimport { PLUGIN_EXTERNALS_MAP } from './pluginexternals';\nimport { PluginLoaderService } from './pluginloader.service';\nimport { PluginsConfigService } from '../global/plugin';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../global/plugin\";\nconst systemJS = window.System;\nexport let ClientPluginLoaderService = /*#__PURE__*/(() => {\n  class ClientPluginLoaderService extends PluginLoaderService {\n    constructor(pluginsConfigService_) {\n      super();\n      this.pluginsConfigService_ = pluginsConfigService_;\n    }\n\n    provideExternals() {\n      Object.keys(PLUGIN_EXTERNALS_MAP).forEach(externalKey => window.define(externalKey, [], () => {\n        // @ts-ignore\n        return PLUGIN_EXTERNALS_MAP[externalKey];\n      }));\n    }\n\n    load(pluginName) {\n      const plugins = this.pluginsConfigService_.pluginsMetadata();\n      const plugin = plugins.find(p => p.name === pluginName);\n\n      if (!plugin) {\n        throw Error(`Can't find plugin \"${pluginName}\"`);\n      }\n\n      const depsPromises = (plugin.dependencies || []).map(dep => {\n        const dependency = plugins.find(d => d.name === dep);\n\n        if (!dependency) {\n          throw Error(`Can't find dependency \"${dep}\" for plugin \"${pluginName}\"`);\n        }\n\n        return systemJS.import(dependency.path).then(m => {\n          window['define'](dep, [], () => m.default);\n        });\n      });\n      return Promise.all(depsPromises).then(() => {\n        return systemJS.import(plugin.path).then(module => module.default.default);\n      });\n    }\n\n  }\n\n  ClientPluginLoaderService.ɵfac = function ClientPluginLoaderService_Factory(t) {\n    return new (t || ClientPluginLoaderService)(i0.ɵɵinject(i1.PluginsConfigService));\n  };\n\n  ClientPluginLoaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientPluginLoaderService,\n    factory: ClientPluginLoaderService.ɵfac\n  });\n  return ClientPluginLoaderService;\n})();","map":null,"metadata":{},"sourceType":"module"}