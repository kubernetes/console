{"ast":null,"code":"import _asyncToGenerator from \"/home/pilou/Documents/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpClient } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { CONFIG_DI_TOKEN } from '../../../index.config';\nimport { AlertDialog } from '../../dialogs/alert/dialog';\nimport { NAMESPACE_STATE_PARAM } from '../../params/params';\nimport { CsrfTokenService } from '../global/csrftoken';\nimport { NamespaceService } from '../global/namespace';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../global/namespace\";\nimport * as i3 from \"../global/csrftoken\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/router\";\nconst i18n = {\n  /** Text shown on failed deploy in error dialog. */\n  MSG_DEPLOY_DIALOG_ERROR: 'Deploying file has failed',\n\n  /** Text shown on partly completed deploy in error dialog. */\n  MSG_DEPLOY_DIALOG_PARTIAL_COMPLETED: 'Deployment has been partly completed',\n\n  /** Title for the dialog shown on deploy validation error. */\n  MSG_DEPLOY_ANYWAY_DIALOG_TITLE: 'Validation error occurred',\n\n  /** Content for the dialog shown on deploy validation error. */\n  MSG_DEPLOY_ANYWAY_DIALOG_CONTENT: 'Would you like to deploy anyway?',\n\n  /** Confirmation text for the dialog shown on deploy validation error. */\n  MSG_DEPLOY_ANYWAY_DIALOG_OK: 'Yes',\n\n  /** Cancellation text for the dialog shown on deploy validation error. */\n  MSG_DEPLOY_ANYWAY_DIALOG_CANCEL: 'No'\n};\nexport let CreateService = /*#__PURE__*/(() => {\n  class CreateService {\n    constructor(http_, namespace_, csrfToken_, matDialog_, router_, CONFIG) {\n      this.http_ = http_;\n      this.namespace_ = namespace_;\n      this.csrfToken_ = csrfToken_;\n      this.matDialog_ = matDialog_;\n      this.router_ = router_;\n      this.CONFIG = CONFIG;\n      this.isDeployInProgress_ = false;\n    }\n\n    createContent(content, validate = true, name = '') {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const spec = {\n          name,\n          namespace: _this.namespace_.current(),\n          content,\n          validate\n        };\n        let response;\n        let error;\n\n        try {\n          const {\n            token\n          } = yield _this.csrfToken_.getTokenForAction('appdeploymentfromfile').toPromise();\n          _this.isDeployInProgress_ = true;\n          response = yield _this.http_.post('api/v1/appdeploymentfromfile', spec, {\n            headers: {\n              [_this.CONFIG.csrfHeaderName]: token\n            }\n          }).toPromise();\n\n          if (response.error.length > 0) {\n            _this.reportError(i18n.MSG_DEPLOY_DIALOG_PARTIAL_COMPLETED, response.error);\n          }\n        } catch (err) {\n          error = err;\n        }\n\n        _this.isDeployInProgress_ = false;\n\n        if (error) {\n          _this.reportError(i18n.MSG_DEPLOY_DIALOG_ERROR, error.error);\n\n          throw error;\n        } else {\n          _this.router_.navigate(['overview'], {\n            queryParams: {\n              [NAMESPACE_STATE_PARAM]: _this.namespace_.current()\n            }\n          });\n        }\n\n        return response;\n      })();\n    }\n\n    deploy(spec) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let response;\n        let error;\n\n        try {\n          const {\n            token\n          } = yield _this2.csrfToken_.getTokenForAction('appdeployment').toPromise();\n          _this2.isDeployInProgress_ = true;\n          response = yield _this2.http_.post('api/v1/appdeployment', spec, {\n            headers: {\n              [_this2.CONFIG.csrfHeaderName]: token\n            }\n          }).toPromise();\n        } catch (err) {\n          error = err;\n        }\n\n        _this2.isDeployInProgress_ = false;\n\n        if (error) {\n          _this2.reportError(i18n.MSG_DEPLOY_DIALOG_ERROR, error.error);\n\n          throw error;\n        } else {\n          _this2.router_.navigate(['overview'], {\n            queryParams: {\n              [NAMESPACE_STATE_PARAM]: spec.namespace\n            }\n          });\n        }\n\n        return response;\n      })();\n    }\n\n    isDeployDisabled() {\n      return this.isDeployInProgress_;\n    }\n\n    reportError(title, message) {\n      const configData = {\n        title,\n        message,\n        confirmLabel: 'OK'\n      };\n      this.matDialog_.open(AlertDialog, {\n        data: configData\n      });\n    }\n\n  }\n\n  CreateService.ɵfac = function CreateService_Factory(t) {\n    return new (t || CreateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NamespaceService), i0.ɵɵinject(i3.CsrfTokenService), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.Router), i0.ɵɵinject(CONFIG_DI_TOKEN));\n  };\n\n  CreateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CreateService,\n    factory: CreateService.ɵfac\n  });\n  return CreateService;\n})();","map":null,"metadata":{},"sourceType":"module"}