{"ast":null,"code":"import { PinnerService } from '@common/services/global/pinner';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@common/services/global/pinner\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/tooltip\";\nimport * as i4 from \"@angular/material/icon\";\nexport let ActionbarDetailPinComponent = /*#__PURE__*/(() => {\n  class ActionbarDetailPinComponent {\n    constructor(pinner_) {\n      this.pinner_ = pinner_;\n      this.namespaced = false;\n    }\n\n    onClick() {\n      if (this.isPinned()) {\n        this.pinner_.unpin(this.typeMeta.kind, this.objectMeta.name, this.objectMeta.namespace);\n      } else {\n        this.pinner_.pin(this.typeMeta.kind, this.objectMeta.name, this.objectMeta.namespace, this.displayName, this.namespaced);\n      }\n    }\n\n    isPinned() {\n      return this.pinner_.isPinned(this.typeMeta.kind, this.objectMeta.name, this.objectMeta.namespace);\n    }\n\n  }\n\n  ActionbarDetailPinComponent.ɵfac = function ActionbarDetailPinComponent_Factory(t) {\n    return new (t || ActionbarDetailPinComponent)(i0.ɵɵdirectiveInject(i1.PinnerService));\n  };\n\n  ActionbarDetailPinComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActionbarDetailPinComponent,\n    selectors: [[\"kd-actionbar-detail-pin\"]],\n    inputs: {\n      objectMeta: \"objectMeta\",\n      typeMeta: \"typeMeta\",\n      displayName: \"displayName\",\n      namespaced: \"namespaced\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"mat-icon-button\", \"\", \"color\", \"accent\", 1, \"kd-toolbar-action\", 3, \"matTooltip\", \"click\"], [3, \"svgIcon\"]],\n    template: function ActionbarDetailPinComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ActionbarDetailPinComponent_Template_button_click_0_listener() {\n          return ctx.onClick();\n        });\n        i0.ɵɵelement(1, \"mat-icon\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"matTooltip\", ctx.isPinned() ? \"Unpin resource\" : \"Pin resource\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"svgIcon\", ctx.isPinned() ? \"pin-crossed\" : \"pin\");\n      }\n    },\n    directives: [i2.MatButton, i3.MatTooltip, i4.MatIcon],\n    encapsulation: 2\n  });\n  return ActionbarDetailPinComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}