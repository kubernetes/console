{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { DOCUMENT } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { LocalConfigLoaderService } from '@common/services/global/loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@common/services/global/loader\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor(_document, _config) {\n      this._document = _document;\n      this._config = _config;\n      this._customThemes = [];\n      this._defaultThemes = [{\n        name: 'kd-light-theme',\n        displayName: 'Light',\n        isDark: false\n      }, {\n        name: 'kd-dark-theme',\n        displayName: 'Dark',\n        isDark: true\n      }];\n      this._onThemeSwitchEvent = new EventEmitter();\n      this._colorSchemeQuery = '(prefers-color-scheme: dark)';\n      this._theme = 'kd-light-theme';\n    }\n\n    get theme() {\n      return this._theme;\n    }\n\n    set theme(theme) {\n      this._theme = theme;\n\n      if (theme === ThemeService.SystemTheme) {\n        theme = this._isSystemThemeDark() ? 'kd-dark-theme' : 'kd-light-theme';\n      }\n\n      this._onThemeSwitchEvent.emit(theme);\n    }\n\n    get themes() {\n      const defaultThemeNames = new Set(this._defaultThemes.map(theme => theme.name)); //const filteredCustomThemes = this._customThemes.filter(theme => !defaultThemeNames.has(theme.name));\n      //return [...this._defaultThemes, ...filteredCustomThemes];\n\n      return [...this._defaultThemes, ...this._defaultThemes];\n    }\n\n    init() {\n      this._document.defaultView.matchMedia(this._colorSchemeQuery).addEventListener('change', e => {\n        if (this.theme === ThemeService.SystemTheme) {\n          this._onThemeSwitchEvent.emit(e.matches ? 'kd-dark-theme' : 'kd-light-theme');\n        }\n      });\n\n      this._customThemes = this._config.appConfig.themes;\n    }\n\n    subscribe(callback) {\n      this._onThemeSwitchEvent.subscribe(callback);\n    }\n\n    isThemeDark() {\n      if (this.theme === ThemeService.SystemTheme) {\n        return this._isSystemThemeDark();\n      }\n\n      const theme = this.themes.find(theme => theme.name === this.theme);\n      return theme ? theme.isDark : false;\n    }\n\n    _isSystemThemeDark() {\n      return this._document.defaultView.matchMedia && this._document.defaultView.matchMedia(this._colorSchemeQuery).matches;\n    }\n\n  }\n\n  ThemeService.SystemTheme = '__system_theme__';\n\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.LocalConfigLoaderService));\n  };\n\n  ThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac\n  });\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module"}