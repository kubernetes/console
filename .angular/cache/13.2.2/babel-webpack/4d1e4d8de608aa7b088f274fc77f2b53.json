{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class FormattedValue {\n  constructor(base, value, suffixes) {\n    this.suffixes_ = suffixes;\n    this.base_ = base;\n    this.value_ = this.normalize_(value);\n  }\n\n  get suffix() {\n    return this.suffix_;\n  }\n\n  get value() {\n    return this.value_;\n  }\n\n  get suffixPower() {\n    return this.suffixes_.indexOf(this.suffix_);\n  }\n\n  normalize_(value) {\n    let divider = 1;\n    let power = 0;\n\n    while (value / divider > this.base_ && power < this.suffixes_.length - 1) {\n      divider *= this.base_;\n      power += 1;\n    }\n\n    this.suffix_ = this.suffixes_[power];\n    return Number((value / divider).toPrecision(3));\n  }\n\n  normalize(suffix) {\n    const currentPower = this.suffixes_.indexOf(this.suffix_);\n    const expectedPower = this.suffixes_.indexOf(suffix);\n\n    if (expectedPower < 0) {\n      throw new Error(`Suffix '${suffix}' not recognized.`);\n    }\n\n    const powerDiff = expectedPower - currentPower;\n    const value = this.value_ / Math.pow(this.base_, powerDiff);\n    this.value_ = Number(value.toPrecision(3));\n    this.suffix_ = suffix;\n  }\n\n  static NewFormattedCoreValue(value) {\n    /** Base for prefixes */\n    const coreBase = 1000;\n    /** Names of the suffixes where I-th name is for base^I suffix. */\n\n    const corePowerSuffixes = ['', 'k', 'M', 'G', 'T'];\n    return new FormattedValue(coreBase, value / 1000, corePowerSuffixes);\n  }\n\n  static NewFormattedMemoryValue(value) {\n    /** Base for binary prefixes */\n    const memoryBase = 1024;\n    /** Names of the suffixes where I-th name is for base^I suffix. */\n\n    const memoryPowerSuffixes = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi'];\n    return new FormattedValue(memoryBase, value, memoryPowerSuffixes);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}