{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { ElementRef } from '@angular/core';\nimport { LocalSettingsService } from '@common/services/global/localsettings';\nimport { ThemeService } from '@common/services/global/theme';\nimport { TitleService } from '@common/services/global/title';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@common/services/global/theme\";\nimport * as i2 from \"@common/services/global/localsettings\";\nimport * as i3 from \"@angular/cdk/overlay\";\nimport * as i4 from \"@common/services/global/title\";\nimport * as i5 from \"@angular/router\";\nexport let RootComponent = /*#__PURE__*/(() => {\n  class RootComponent {\n    constructor(_themeService, _localSettingService, _overlayContainer, _kdRootRef, _titleService) {\n      this._themeService = _themeService;\n      this._localSettingService = _localSettingService;\n      this._overlayContainer = _overlayContainer;\n      this._kdRootRef = _kdRootRef;\n      this._titleService = _titleService;\n      this._theme = this._themeService.theme;\n    }\n\n    ngOnInit() {\n      this._titleService.update();\n\n      this._themeService.subscribe(this.onThemeChange_.bind(this));\n\n      const localSettings = this._localSettingService.get();\n\n      if (localSettings && localSettings.theme) {\n        this._theme = localSettings.theme;\n        this._themeService.theme = localSettings.theme;\n      }\n\n      this.applyOverlayContainerTheme_('', this._theme);\n    }\n\n    onThemeChange_(theme) {\n      this.applyOverlayContainerTheme_(this._theme, theme);\n      this._theme = theme;\n    }\n\n    applyOverlayContainerTheme_(oldTheme, newTheme) {\n      if (!!oldTheme && oldTheme !== newTheme) {\n        this._overlayContainer.getContainerElement().classList.remove(oldTheme);\n\n        this._kdRootRef.nativeElement.classList.remove(oldTheme);\n      }\n\n      this._overlayContainer.getContainerElement().classList.add(newTheme);\n\n      this._kdRootRef.nativeElement.classList.add(newTheme);\n    }\n\n  }\n\n  RootComponent.ɵfac = function RootComponent_Factory(t) {\n    return new (t || RootComponent)(i0.ɵɵdirectiveInject(i1.ThemeService), i0.ɵɵdirectiveInject(i2.LocalSettingsService), i0.ɵɵdirectiveInject(i3.OverlayContainer), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i4.TitleService));\n  };\n\n  RootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RootComponent,\n    selectors: [[\"kd-root\"]],\n    decls: 1,\n    vars: 0,\n    template: function RootComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"router-outlet\");\n      }\n    },\n    directives: [i5.RouterOutlet],\n    encapsulation: 2\n  });\n  return RootComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}