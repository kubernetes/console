{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { EventEmitter } from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let KdStateService = /*#__PURE__*/(() => {\n  class KdStateService {\n    constructor(router_) {\n      this.router_ = router_;\n      this.onBefore = new EventEmitter();\n      this.onSuccess = new EventEmitter();\n      this.router_.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.onBefore.emit();\n        }\n\n        if (event instanceof NavigationEnd) {\n          this.onSuccess.emit();\n        }\n      });\n    }\n\n    href(stateName, resourceName, namespace, resourceType) {\n      resourceName = resourceName || '';\n      namespace = namespace || '';\n      resourceType = resourceType || '';\n\n      if (namespace && resourceName === undefined) {\n        throw new Error('Namespace can not be defined without resourceName.');\n      }\n\n      let href = `/${stateName}`;\n      href = namespace ? `${href}/${namespace}` : href;\n      href = resourceName ? `${href}/${resourceName}` : href;\n      href = resourceType ? `${href}/${resourceType}` : href;\n      return href;\n    }\n\n  }\n\n  KdStateService.ɵfac = function KdStateService_Factory(t) {\n    return new (t || KdStateService)(i0.ɵɵinject(i1.Router));\n  };\n\n  KdStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: KdStateService,\n    factory: KdStateService.ɵfac\n  });\n  return KdStateService;\n})();","map":null,"metadata":{},"sourceType":"module"}