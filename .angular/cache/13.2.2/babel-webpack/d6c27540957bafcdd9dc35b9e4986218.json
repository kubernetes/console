{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let Sparkline = /*#__PURE__*/(() => {\n  class Sparkline {\n    constructor() {\n      this.lastValue = 0;\n    }\n\n    getPolygonPoints() {\n      const series = this.timeseries.map(({\n        timestamp,\n        value\n      }) => [Date.parse(timestamp), value]);\n      const sorted = series.slice().sort((a, b) => a[0] - b[0]);\n      this.lastValue = sorted.length > 0 ? sorted[sorted.length - 1][1] : undefined;\n      const xShift = Math.min(...sorted.map(pt => pt[0]));\n      const shifted = sorted.map(([x, y]) => [x - xShift, y]);\n      const xScale = Math.max(...shifted.map(pt => pt[0])) || 1;\n      const yScale = Math.max(...shifted.map(pt => pt[1])) || 1;\n      const scaled = shifted.map(([x, y]) => [x / xScale, y / yScale]); // Invert Y because SVG Y=0 is at the top, and we want low values\n      // of Y to be closer to the bottom of the graphic.\n\n      const map = scaled.map(([x, y]) => `${x},${1 - y}`).join(' ');\n      return `0,1 ${map} 1,1`;\n    }\n\n  }\n\n  Sparkline.ɵfac = function Sparkline_Factory(t) {\n    return new (t || Sparkline)();\n  };\n\n  Sparkline.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: Sparkline,\n    inputs: {\n      timeseries: \"timeseries\"\n    }\n  });\n  return Sparkline;\n})();","map":null,"metadata":{},"sourceType":"module"}