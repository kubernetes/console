{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ElementRef, EventEmitter, SimpleChanges } from '@angular/core';\nimport { config, edit } from 'ace-builds';\nimport { ThemeService } from '../../services/global/theme';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/global/theme\";\nconst _c0 = [\"editor\"];\nvar EditorTheme = /*#__PURE__*/(() => {\n  (function (EditorTheme) {\n    EditorTheme[\"light\"] = \"textmate\";\n    EditorTheme[\"dark\"] = \"idle_fingers\";\n  })(EditorTheme || (EditorTheme = {}));\n\n  return EditorTheme;\n})();\nexport var EditorMode = /*#__PURE__*/(() => {\n  (function (EditorMode) {\n    EditorMode[\"JSON\"] = \"json\";\n    EditorMode[\"YAML\"] = \"yaml\";\n  })(EditorMode || (EditorMode = {}));\n\n  return EditorMode;\n})();\nexport let TextInputComponent = /*#__PURE__*/(() => {\n  class TextInputComponent {\n    constructor(themeService_) {\n      this.themeService_ = themeService_;\n      this.textChange = new EventEmitter();\n      this.readOnly = false;\n      this.mode = EditorMode.YAML;\n      this.prettify = true;\n      this.border = true; // All possible options can be found at:\n      // https://github.com/ajaxorg/ace/wiki/Configuring-Ace\n\n      this.options = {\n        showPrintMargin: false,\n        highlightActiveLine: true,\n        tabSize: 2,\n        wrap: true,\n        fontSize: 14,\n        fontFamily: \"'Roboto Mono Regular', monospace\"\n      };\n    }\n\n    ngOnInit() {\n      this.theme = this.themeService_.isThemeDark() ? EditorTheme.dark : EditorTheme.light;\n    }\n\n    ngAfterViewInit() {\n      this.initEditor_();\n    }\n\n    onTextChange(text) {\n      this.textChange.emit(text);\n    }\n\n    ngOnChanges(changes) {\n      if (!this.editor) {\n        return;\n      }\n\n      for (const propName in changes) {\n        if (changes.hasOwnProperty(propName)) {\n          switch (propName) {\n            case 'text':\n              this.onExternalUpdate_();\n              break;\n\n            case 'mode':\n              this.onEditorModeChange_();\n              break;\n\n            default:\n          }\n        }\n      }\n    }\n\n    initEditor_() {\n      config.set('basePath', 'ace');\n      this.editor = edit(this.editorRef.nativeElement);\n      this.prettify_();\n      this.editor.setOptions(this.options);\n      this.editor.setValue(this.text, -1);\n      this.editor.setReadOnly(this.readOnly);\n      this.setEditorTheme_();\n      this.setEditorMode_();\n      this.editor.session.setUseWorker(false);\n      this.editor.on('change', () => this.onEditorTextChange_());\n    }\n\n    onExternalUpdate_() {\n      this.prettify_();\n      const point = this.editor.getCursorPosition();\n      this.editor.setValue(this.text, -1);\n      this.editor.moveCursorToPosition(point);\n    }\n\n    onEditorTextChange_() {\n      this.text = this.editor.getValue();\n      this.onTextChange(this.text);\n    }\n\n    onEditorModeChange_() {\n      this.setEditorMode_();\n    }\n\n    setEditorTheme_() {\n      this.editor.setTheme(`ace/theme/${this.theme}`);\n    }\n\n    setEditorMode_() {\n      this.editor.session.setMode(`ace/mode/${this.mode}`);\n    }\n\n    prettify_() {\n      if (!this.prettify) {\n        return;\n      }\n\n      try {\n        switch (this.mode) {\n          case 'json':\n            this.text = JSON.stringify(JSON.parse(this.text), null, '\\t'); // Replace \\n with new lines\n\n            this.text = this.text.replace(new RegExp(/\\\\n/g), '\\n\\t\\t');\n            break;\n\n          default:\n            // Do nothing when mode is not recognized.\n            break;\n        }\n      } catch (e) {// Ignore any errors in case of wrong format. Formatting will not be applied.\n      }\n    }\n\n  }\n\n  TextInputComponent.ɵfac = function TextInputComponent_Factory(t) {\n    return new (t || TextInputComponent)(i0.ɵɵdirectiveInject(i1.ThemeService));\n  };\n\n  TextInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TextInputComponent,\n    selectors: [[\"kd-text-input\"]],\n    viewQuery: function TextInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editorRef = _t.first);\n      }\n    },\n    inputs: {\n      text: \"text\",\n      readOnly: \"readOnly\",\n      mode: \"mode\",\n      prettify: \"prettify\",\n      border: \"border\"\n    },\n    outputs: {\n      textChange: \"textChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"kd-ace\"], [\"editor\", \"\"]],\n    template: function TextInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    styles: [\".kd-ace[_ngcontent-%COMP%] {\\n  height: 360px;\\n  width: 100%;\\n}\"]\n  });\n  return TextInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}