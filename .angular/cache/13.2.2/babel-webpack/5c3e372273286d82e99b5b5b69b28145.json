{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Injector, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiError, AsKdError, KdError } from '@common/errors/errors';\nimport { AuthService } from '@common/services/global/authentication';\nimport { YAMLException } from 'js-yaml';\nimport * as i0 from \"@angular/core\";\nexport let GlobalErrorHandler = /*#__PURE__*/(() => {\n  class GlobalErrorHandler {\n    constructor(injector_, ngZone_) {\n      this.injector_ = injector_;\n      this.ngZone_ = ngZone_;\n    }\n\n    get router_() {\n      return this.injector_.get(Router);\n    }\n\n    get auth_() {\n      return this.injector_.get(AuthService);\n    }\n\n    handleError(error) {\n      if (error instanceof HttpErrorResponse) {\n        this.handleHTTPError_(error);\n        return;\n      }\n\n      if (error instanceof YAMLException) {\n        console.error(error);\n        return;\n      }\n\n      throw error;\n    }\n\n    handleHTTPError_(error) {\n      this.ngZone_.run(() => {\n        if (KdError.isError(error, ApiError.tokenExpired, ApiError.encryptionKeyChanged)) {\n          this.auth_.removeAuthCookies();\n          this.router_.navigate(['login'], {\n            state: {\n              error: AsKdError(error)\n            }\n          });\n          return;\n        }\n\n        if (!this.router_.routerState.snapshot.url.includes('error')) {\n          this.router_.navigate(['error'], {\n            queryParamsHandling: 'preserve',\n            state: {\n              error: AsKdError(error)\n            }\n          });\n        }\n      });\n    }\n\n  }\n\n  GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) {\n    return new (t || GlobalErrorHandler)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone));\n  };\n\n  GlobalErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalErrorHandler,\n    factory: GlobalErrorHandler.ɵfac\n  });\n  return GlobalErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}