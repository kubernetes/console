{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class FormValidators {\n  /**\n   * Checks that a name begins and ends with a lowercase letter\n   * and contains nothing but lowercase letters and hyphens (\"-\")\n   * (leading and trailing spaces are ignored by default)\n   */\n  static namePattern(control) {\n    if (control.value) {\n      const namePattern = new RegExp('^[a-z]([-a-z0-9]*[a-z0-9])?$');\n      const result = namePattern.test(control.value);\n      return result ? null : {\n        namePattern: {\n          value: control.value\n        }\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Returns true if given value is a correct integer value, false otherwise.\n   * When value is undefined or empty then it is considered as correct value in order\n   * to not conflict with other validations like 'required'.\n   */\n\n\n  static isInteger(control) {\n    const value = control.value;\n\n    if (value) {\n      const result = Number(value) === value && value % 1 === 0 || !value;\n      return result ? null : {\n        kdValidInteger: {\n          value: control.value\n        }\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Returns true if the label key name (after the \"/\" if there is one) is equal or shorter than 63\n   * characters, otherwise returns false.\n   */\n\n\n  static labelKeyNameLength(control) {\n    const value = control.value;\n    const maxKeyLength = 63;\n    const slashPosition = value.indexOf('/');\n    const labelKeyName = slashPosition > -1 ? value.substring(slashPosition + 1) : value;\n    return labelKeyName.length <= maxKeyLength ? null : {\n      kdValidLabelKeyPrefixLength: {\n        value: true\n      }\n    };\n  }\n  /**\n   * Returns true if the label key prefix (before the \"/\" if there is one) is equal or shorter than\n   * 253 characters, otherwise returns false.\n   */\n\n\n  static labelKeyPrefixLength(control) {\n    const value = control.value;\n    const maxKeyLength = 253;\n    const slashPosition = value.indexOf('/');\n    const labelKeyPrefix = slashPosition > -1 ? value.substring(0, slashPosition) : '';\n    return labelKeyPrefix.length <= maxKeyLength ? null : {\n      kdValidLabelKeyPrefixLength: {\n        value: true\n      }\n    };\n  }\n  /**\n   * Returns true if the label key name (after the \"/\" if there is one) matches an alphanumeric\n   * character (upper or lower case) optionally followed by alphanumeric or -_. and ending\n   * with an alphanumeric character (upper or lower case), otherwise returns false.\n   */\n\n\n  static labelKeyNamePattern(control) {\n    const value = control.value;\n    const labelKeyNamePattern = /^([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$/;\n    const slashPosition = value.indexOf('/');\n    const labelKeyName = slashPosition > -1 ? value.substring(slashPosition + 1) : value;\n    return labelKeyNamePattern.test(labelKeyName) || value === '' ? null : {\n      kdValidLabelKeyNamePattern: {\n        value: true\n      }\n    };\n  }\n\n  static labelKeyPrefixPattern(control) {\n    const value = control.value;\n    const labelKeyPrefixPattern = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\n    const slashPosition = value.indexOf('/');\n    const isValid = slashPosition > -1 ? labelKeyPrefixPattern.test(value.substring(0, slashPosition)) : true;\n    return isValid ? null : {\n      kdValidLabelKeyPrefixPattern: {\n        value: true\n      }\n    };\n  }\n\n  static labelValuePattern(control) {\n    const value = control.value;\n    const labelValuePattern = /^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$/;\n    return labelValuePattern.test(value) ? null : {\n      kdValidLabelValuePattern: {\n        value: true\n      }\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}