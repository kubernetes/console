{"ast":null,"code":"import { Router, UrlTree } from '@angular/router';\nimport { of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\nimport { AuthService } from '../global/authentication';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../global/authentication\";\nimport * as i2 from \"@angular/router\";\nexport let LoginGuard = /*#__PURE__*/(() => {\n  class LoginGuard {\n    constructor(authService_, router_) {\n      this.authService_ = authService_;\n      this.router_ = router_;\n    }\n\n    canActivate() {\n      return this.authService_.getLoginStatus().pipe(take(1)).pipe(switchMap(loginStatus => {\n        if (!this.authService_.isAuthenticationEnabled(loginStatus)) {\n          return this.router_.navigate(['workloads']);\n        }\n\n        return of(true);\n      })).pipe(catchError(_ => this.router_.navigate(['workloads'])));\n    }\n\n  }\n\n  LoginGuard.ɵfac = function LoginGuard_Factory(t) {\n    return new (t || LoginGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  LoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginGuard,\n    factory: LoginGuard.ɵfac\n  });\n  return LoginGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}