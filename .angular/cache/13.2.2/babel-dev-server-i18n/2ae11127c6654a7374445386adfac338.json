{"ast":null,"code":"import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../textinput/component\";\nimport * as i3 from \"@angular/material/button\";\nexport let ChipDialog = /*#__PURE__*/(() => {\n  class ChipDialog {\n    constructor(dialogRef, data) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n    }\n\n    onNoClick() {\n      this.dialogRef.close();\n    }\n\n  }\n\n  ChipDialog.ɵfac = function ChipDialog_Factory(t) {\n    return new (t || ChipDialog)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  ChipDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChipDialog,\n    selectors: [[\"kd-chip-dialog\"]],\n    decls: 8,\n    vars: 4,\n    consts: function () {\n      let i18n_0;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        const MSG_EXTERNAL_7819314041543176992$$SRC_APP_FRONTEND_COMMON_COMPONENTS_CHIPS_CHIPDIALOG_DIALOG_TS_1 = goog.getMsg(\"Close\");\n        i18n_0 = MSG_EXTERNAL_7819314041543176992$$SRC_APP_FRONTEND_COMMON_COMPONENTS_CHIPS_CHIPDIALOG_DIALOG_TS_1;\n      } else {\n        i18n_0 = $localize`Close`;\n      }\n\n      return [[\"mat-dialog-title\", \"\"], [\"mode\", \"json\", 3, \"text\", \"readOnly\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"mat-dialog-close\"], i18n_0];\n    },\n    template: function ChipDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵelementStart(1, \"code\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-dialog-content\");\n        i0.ɵɵelement(4, \"kd-text-input\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-dialog-actions\");\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵi18n(7, 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.data.key);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"text\", ctx.data.value)(\"readOnly\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n      }\n    },\n    directives: [i1.MatDialogTitle, i1.MatDialogContent, i2.TextInputComponent, i1.MatDialogActions, i3.MatButton, i1.MatDialogClose],\n    encapsulation: 2\n  });\n  return ChipDialog;\n})();","map":null,"metadata":{},"sourceType":"module"}