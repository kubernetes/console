{"ast":null,"code":"// Copyright 2017 The Kubernetes Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ElementRef, Renderer2 } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatButtonToggleGroup } from '@angular/material/button-toggle';\nimport { HttpClient } from '@angular/common/http';\nimport { dump as toYaml, load as fromYaml } from 'js-yaml';\nimport { EditorMode } from '@common/components/textinput/component';\nimport { ActionbarService, ResourceMeta } from '@common/services/global/actionbar';\nimport { NamespacedResourceService } from '@common/services/resource/resource';\nimport { EndpointManager, Resource } from '@common/services/resource/endpoint';\nimport { NotificationsService } from '@common/services/global/notifications';\nimport { RawResource } from '@common/resources/rawresource';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@common/services/resource/resource\";\nimport * as i2 from \"@common/services/global/actionbar\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@common/services/global/notifications\";\nimport * as i5 from \"@angular/common/http\";\nimport * as i6 from \"../../common/components/objectmeta/component\";\nimport * as i7 from \"../../common/components/card/component\";\nimport * as i8 from \"@angular/material/button-toggle\";\nimport * as i9 from \"../../common/components/textinput/component\";\nimport * as i10 from \"../../common/components/resourcelist/event/component\";\nconst _c0 = [\"group\"];\nconst _c1 = [\"code\"];\nexport let CRDObjectDetailComponent = /*#__PURE__*/(() => {\n  class CRDObjectDetailComponent {\n    constructor(object_, actionbar_, activatedRoute_, notifications_, http_, renderer_) {\n      this.object_ = object_;\n      this.actionbar_ = actionbar_;\n      this.activatedRoute_ = activatedRoute_;\n      this.notifications_ = notifications_;\n      this.http_ = http_;\n      this.renderer_ = renderer_;\n      this.endpoint_ = EndpointManager.resource(Resource.crd, true);\n      this.modes = EditorMode;\n      this.isInitialized = false;\n      this.selectedMode = EditorMode.YAML;\n      this.text = '';\n    }\n\n    ngOnInit() {\n      const {\n        crdName,\n        namespace,\n        objectName\n      } = this.activatedRoute_.snapshot.params;\n      this.eventListEndpoint = this.endpoint_.child(`${crdName}/${objectName}`, Resource.event, namespace);\n      this.objectSubscription_ = this.object_.get(this.endpoint_.child(crdName, objectName, namespace)).subscribe(d => {\n        this.object = d;\n        this.notifications_.pushErrors(d.errors);\n        this.actionbar_.onInit.emit(new ResourceMeta(d.typeMeta.kind, d.objectMeta, d.typeMeta));\n        this.isInitialized = true; // Get raw resource\n\n        const url = RawResource.getUrl(this.object.typeMeta, this.object.objectMeta);\n        this.http_.get(url).toPromise().then(response => {\n          if (this.selectedMode === EditorMode.YAML) {\n            this.text = toYaml(response);\n          } else {\n            this.text = this.toRawJSON_(response);\n          }\n        });\n      });\n      this.buttonToggleGroup.valueChange.subscribe(selectedMode => {\n        this.selectedMode = selectedMode;\n\n        if (this.text) {\n          this.updateText_();\n        }\n      });\n    }\n\n    getSelectedMode() {\n      return this.selectedMode;\n    }\n\n    ngOnDestroy() {\n      this.objectSubscription_.unsubscribe();\n      this.actionbar_.onDetailsLeave.emit();\n    }\n\n    updateText_() {\n      if (this.selectedMode === EditorMode.YAML) {\n        this.text = toYaml(JSON.parse(this.text));\n      } else {\n        this.text = this.toRawJSON_(fromYaml(this.text));\n      }\n    }\n\n    toRawJSON_(object) {\n      return JSON.stringify(object, null, '\\t');\n    }\n\n  }\n\n  CRDObjectDetailComponent.ɵfac = function CRDObjectDetailComponent_Factory(t) {\n    return new (t || CRDObjectDetailComponent)(i0.ɵɵdirectiveInject(i1.NamespacedResourceService), i0.ɵɵdirectiveInject(i2.ActionbarService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.NotificationsService), i0.ɵɵdirectiveInject(i5.HttpClient), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  CRDObjectDetailComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CRDObjectDetailComponent,\n    selectors: [[\"kd-crd-object-detail\"]],\n    viewQuery: function CRDObjectDetailComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonToggleGroup = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.codeRef = _t.first);\n      }\n    },\n    decls: 13,\n    vars: 10,\n    consts: function () {\n      let i18n_2;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        const MSG_EXTERNAL_146442697456175258$$SRC_APP_FRONTEND_CRD_CRDOBJECT_COMPONENT_TS_3 = goog.getMsg(\"Data\");\n        i18n_2 = MSG_EXTERNAL_146442697456175258$$SRC_APP_FRONTEND_CRD_CRDOBJECT_COMPONENT_TS_3;\n      } else {\n        i18n_2 = $localize`Data`;\n      }\n\n      return [[3, \"initialized\", \"objectMeta\"], [\"title\", \"\"], i18n_2, [\"content\", \"\"], [\"group\", \"matButtonToggleGroup\"], [3, \"value\", \"checked\"], [3, \"value\"], [3, \"text\", \"prettify\", \"readOnly\", \"mode\", \"textChange\"], [3, \"endpoint\"]];\n    },\n    template: function CRDObjectDetailComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"kd-object-meta\", 0);\n        i0.ɵɵelementStart(1, \"kd-card\");\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵi18n(3, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"mat-button-toggle-group\", null, 4);\n        i0.ɵɵelementStart(7, \"mat-button-toggle\", 5);\n        i0.ɵɵtext(8, \"YAML\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-button-toggle\", 6);\n        i0.ɵɵtext(10, \"JSON\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"kd-text-input\", 7);\n        i0.ɵɵlistener(\"textChange\", function CRDObjectDetailComponent_Template_kd_text_input_textChange_11_listener($event) {\n          return ctx.text = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"kd-event-list\", 8);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"initialized\", ctx.isInitialized)(\"objectMeta\", ctx.object == null ? null : ctx.object.objectMeta);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"value\", ctx.modes.YAML)(\"checked\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.modes.JSON);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"text\", ctx.text)(\"prettify\", false)(\"readOnly\", true)(\"mode\", ctx.getSelectedMode());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"endpoint\", ctx.eventListEndpoint);\n      }\n    },\n    directives: [i6.ObjectMetaComponent, i7.CardComponent, i8.MatButtonToggleGroup, i8.MatButtonToggle, i9.TextInputComponent, i10.EventListComponent],\n    encapsulation: 2\n  });\n  return CRDObjectDetailComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}